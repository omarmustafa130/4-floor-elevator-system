
Atmega2560_Device_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000e98  00000f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800206  00800206  00000f32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f27  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001393  00000000  00000000  0000411b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000173f  00000000  00000000  000054ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  00006bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e82  00000000  00000000  00007380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd3  00000000  00000000  00008202  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009dd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	84 c0       	rjmp	.+264    	; 0x10a <__ctors_end>
   2:	00 00       	nop
   4:	bf c1       	rjmp	.+894    	; 0x384 <__vector_1>
   6:	00 00       	nop
   8:	ea c1       	rjmp	.+980    	; 0x3de <__vector_2>
   a:	00 00       	nop
   c:	15 c2       	rjmp	.+1066   	; 0x438 <__vector_3>
   e:	00 00       	nop
  10:	40 c2       	rjmp	.+1152   	; 0x492 <__vector_4>
  12:	00 00       	nop
  14:	6b c2       	rjmp	.+1238   	; 0x4ec <__vector_5>
  16:	00 00       	nop
  18:	96 c2       	rjmp	.+1324   	; 0x546 <__vector_6>
  1a:	00 00       	nop
  1c:	c1 c2       	rjmp	.+1410   	; 0x5a0 <__vector_7>
  1e:	00 00       	nop
  20:	ec c2       	rjmp	.+1496   	; 0x5fa <__vector_8>
  22:	00 00       	nop
  24:	17 c3       	rjmp	.+1582   	; 0x654 <__vector_9>
  26:	00 00       	nop
  28:	40 c3       	rjmp	.+1664   	; 0x6aa <__vector_10>
  2a:	00 00       	nop
  2c:	69 c3       	rjmp	.+1746   	; 0x700 <__vector_11>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	fb c3       	rjmp	.+2038   	; 0x85c <__vector_25>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
  92:	00 00       	nop
  94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
  96:	00 00       	nop
  98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
  be:	00 00       	nop
  c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
  da:	00 00       	nop
  dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
  de:	00 00       	nop
  e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	d0 00       	.word	0x00d0	; ????
  e6:	af 00       	.word	0x00af	; ????
  e8:	b2 00       	.word	0x00b2	; ????
  ea:	b5 00       	.word	0x00b5	; ????
  ec:	b8 00       	.word	0x00b8	; ????
  ee:	bb 00       	.word	0x00bb	; ????
  f0:	be 00       	.word	0x00be	; ????
  f2:	c1 00       	.word	0x00c1	; ????
  f4:	c4 00       	.word	0x00c4	; ????
  f6:	c7 00       	.word	0x00c7	; ????
  f8:	ca 00       	.word	0x00ca	; ????
  fa:	72 01       	movw	r14, r4
  fc:	79 01       	movw	r14, r18
  fe:	83 01       	movw	r16, r6
 100:	8e 01       	movw	r16, r28
 102:	99 01       	movw	r18, r18
 104:	a0 01       	movw	r20, r0
 106:	aa 01       	movw	r20, r20
 108:	b5 01       	movw	r22, r10

0000010a <__ctors_end>:
 10a:	11 24       	eor	r1, r1
 10c:	1f be       	out	0x3f, r1	; 63
 10e:	cf ef       	ldi	r28, 0xFF	; 255
 110:	d1 e2       	ldi	r29, 0x21	; 33
 112:	de bf       	out	0x3e, r29	; 62
 114:	cd bf       	out	0x3d, r28	; 61
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	0c bf       	out	0x3c, r16	; 60

0000011a <__do_copy_data>:
 11a:	12 e0       	ldi	r17, 0x02	; 2
 11c:	a0 e0       	ldi	r26, 0x00	; 0
 11e:	b2 e0       	ldi	r27, 0x02	; 2
 120:	e8 e9       	ldi	r30, 0x98	; 152
 122:	fe e0       	ldi	r31, 0x0E	; 14
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	0b bf       	out	0x3b, r16	; 59
 128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
 12a:	07 90       	elpm	r0, Z+
 12c:	0d 92       	st	X+, r0
 12e:	a6 30       	cpi	r26, 0x06	; 6
 130:	b1 07       	cpc	r27, r17
 132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
 134:	22 e0       	ldi	r18, 0x02	; 2
 136:	a6 e0       	ldi	r26, 0x06	; 6
 138:	b2 e0       	ldi	r27, 0x02	; 2
 13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
 13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
 13e:	ae 32       	cpi	r26, 0x2E	; 46
 140:	b2 07       	cpc	r27, r18
 142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
 144:	71 d6       	rcall	.+3298   	; 0xe28 <main>
 146:	a6 c6       	rjmp	.+3404   	; 0xe94 <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <PGPIO_PORT_tPtrGetRegister>:
#include "GPIO_private.h"
#include "GPIO_interface.h"

volatile PORT_t* PGPIO_PORT_tPtrGetRegister (enum GPIO_PORT_ID_t PORT_ID)
{
	switch(PORT_ID){
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	8b 30       	cpi	r24, 0x0B	; 11
 14e:	91 05       	cpc	r25, r1
 150:	20 f5       	brcc	.+72     	; 0x19a <PGPIO_PORT_tPtrGetRegister+0x50>
 152:	fc 01       	movw	r30, r24
 154:	88 27       	eor	r24, r24
 156:	ee 58       	subi	r30, 0x8E	; 142
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	8f 4f       	sbci	r24, 0xFF	; 255
 15c:	93 c6       	rjmp	.+3366   	; 0xe84 <__tablejump2__>
		case GPIO_PORTA:
			return PORTA_REGS;
		case GPIO_PORTB:
			return PORTB_REGS;
 15e:	83 e2       	ldi	r24, 0x23	; 35
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
		case GPIO_PORTC:
			return PORTC_REGS;
 164:	86 e2       	ldi	r24, 0x26	; 38
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
		case GPIO_PORTD:
			return PORTD_REGS;
 16a:	89 e2       	ldi	r24, 0x29	; 41
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	08 95       	ret
		case GPIO_PORTE:
			return PORTE_REGS;
 170:	8c e2       	ldi	r24, 0x2C	; 44
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret
		case GPIO_PORTF:
			return PORTF_REGS;
 176:	8f e2       	ldi	r24, 0x2F	; 47
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret
		case GPIO_PORTG:
			return PORTG_REGS;
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 95       	ret
		case GPIO_PORTH:
			return PORTH_REGS;
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	08 95       	ret
		case GPIO_PORTJ:
			return PORTJ_REGS;
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	08 95       	ret
		case GPIO_PORTK:
			return PORTK_REGS;
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	08 95       	ret
		case GPIO_PORTL:
			return PORTL_REGS;
 194:	89 e0       	ldi	r24, 0x09	; 9
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	08 95       	ret
		default:
			return 0;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

volatile PORT_t* PGPIO_PORT_tPtrGetRegister (enum GPIO_PORT_ID_t PORT_ID)
{
	switch(PORT_ID){
		case GPIO_PORTA:
			return PORTA_REGS;
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	90 e0       	ldi	r25, 0x00	; 0
		case GPIO_PORTL:
			return PORTL_REGS;
		default:
			return 0;
	}
}
 1a4:	08 95       	ret

000001a6 <MGPIO_VoidSetPortDirection>:

/*GPIO functions*/
void MGPIO_VoidSetPortDirection(enum GPIO_PORT_ID_t GPIO_PORT_ID, enum GPIO_DIRECTION_t GPIO_DIRECTION)
{
 1a6:	cf 93       	push	r28
 1a8:	c6 2f       	mov	r28, r22
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 1aa:	cf df       	rcall	.-98     	; 0x14a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	89 f0       	breq	.+34     	; 0x1d2 <MGPIO_VoidSetPortDirection+0x2c>
		return;
	switch(GPIO_DIRECTION)
 1b0:	c1 30       	cpi	r28, 0x01	; 1
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <MGPIO_VoidSetPortDirection+0x1c>
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <MGPIO_VoidSetPortDirection+0x16>
 1b6:	c2 30       	cpi	r28, 0x02	; 2
 1b8:	41 f0       	breq	.+16     	; 0x1ca <MGPIO_VoidSetPortDirection+0x24>
 1ba:	0b c0       	rjmp	.+22     	; 0x1d2 <MGPIO_VoidSetPortDirection+0x2c>
	{
		case GPIO_INPUT:
			P->DDR = 0;
 1bc:	fc 01       	movw	r30, r24
 1be:	11 82       	std	Z+1, r1	; 0x01
			break;
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <MGPIO_VoidSetPortDirection+0x2c>
		case GPIO_OUTPUT:
			P->DDR=255;
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	fc 01       	movw	r30, r24
 1c6:	21 83       	std	Z+1, r18	; 0x01
			break;
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <MGPIO_VoidSetPortDirection+0x2c>
		case GPIO_INPUT_PULLUP:
			P->DDR=0;
 1ca:	fc 01       	movw	r30, r24
 1cc:	11 82       	std	Z+1, r1	; 0x01
			P->PORT=255;
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	22 83       	std	Z+2, r18	; 0x02
			break;
	}
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <MGPIO_VoidSetPinDirection>:

void MGPIO_VoidSetPinDirection(enum GPIO_PORT_ID_t GPIO_PORT_ID, u8 Copy_u8PinNo, enum GPIO_DIRECTION_t GPIO_DIRECTION)
{
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	d6 2f       	mov	r29, r22
 1dc:	c4 2f       	mov	r28, r20
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 1de:	b5 df       	rcall	.-150    	; 0x14a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	79 f1       	breq	.+94     	; 0x242 <MGPIO_VoidSetPinDirection+0x6c>
		return;
	switch(GPIO_DIRECTION)
 1e4:	c1 30       	cpi	r28, 0x01	; 1
 1e6:	89 f0       	breq	.+34     	; 0x20a <MGPIO_VoidSetPinDirection+0x34>
 1e8:	18 f0       	brcs	.+6      	; 0x1f0 <MGPIO_VoidSetPinDirection+0x1a>
 1ea:	c2 30       	cpi	r28, 0x02	; 2
 1ec:	d1 f0       	breq	.+52     	; 0x222 <MGPIO_VoidSetPinDirection+0x4c>
 1ee:	29 c0       	rjmp	.+82     	; 0x242 <MGPIO_VoidSetPinDirection+0x6c>
	{
		case GPIO_INPUT:
			CLR_BIT(P->DDR, Copy_u8PinNo);
 1f0:	fc 01       	movw	r30, r24
 1f2:	41 81       	ldd	r20, Z+1	; 0x01
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MGPIO_VoidSetPinDirection+0x28>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	da 95       	dec	r29
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MGPIO_VoidSetPinDirection+0x24>
 202:	20 95       	com	r18
 204:	24 23       	and	r18, r20
 206:	21 83       	std	Z+1, r18	; 0x01
			break;
 208:	1c c0       	rjmp	.+56     	; 0x242 <MGPIO_VoidSetPinDirection+0x6c>
		case GPIO_OUTPUT:
			SET_BIT(P->DDR, Copy_u8PinNo);
 20a:	fc 01       	movw	r30, r24
 20c:	41 81       	ldd	r20, Z+1	; 0x01
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <MGPIO_VoidSetPinDirection+0x42>
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	da 95       	dec	r29
 21a:	e2 f7       	brpl	.-8      	; 0x214 <MGPIO_VoidSetPinDirection+0x3e>
 21c:	24 2b       	or	r18, r20
 21e:	21 83       	std	Z+1, r18	; 0x01
			break;
 220:	10 c0       	rjmp	.+32     	; 0x242 <MGPIO_VoidSetPinDirection+0x6c>
		case GPIO_INPUT_PULLUP:
			CLR_BIT(P->DDR, Copy_u8PinNo);
 222:	fc 01       	movw	r30, r24
 224:	41 81       	ldd	r20, Z+1	; 0x01
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <MGPIO_VoidSetPinDirection+0x5a>
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	da 95       	dec	r29
 232:	e2 f7       	brpl	.-8      	; 0x22c <MGPIO_VoidSetPinDirection+0x56>
 234:	32 2f       	mov	r19, r18
 236:	30 95       	com	r19
 238:	34 23       	and	r19, r20
 23a:	31 83       	std	Z+1, r19	; 0x01
			SET_BIT(P->PORT, Copy_u8PinNo);
 23c:	32 81       	ldd	r19, Z+2	; 0x02
 23e:	23 2b       	or	r18, r19
 240:	22 83       	std	Z+2, r18	; 0x02
			break;
	}
	
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <MGPIO_VoidSetPortValue>:

void MGPIO_VoidSetPortValue(enum GPIO_PORT_ID_t GPIO_PORT_ID, u8 Copy_u8Value)
{
 248:	cf 93       	push	r28
 24a:	c6 2f       	mov	r28, r22
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 24c:	7e df       	rcall	.-260    	; 0x14a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	11 f0       	breq	.+4      	; 0x256 <MGPIO_VoidSetPortValue+0xe>
		return;
	P->PORT = Copy_u8Value;
 252:	fc 01       	movw	r30, r24
 254:	c2 83       	std	Z+2, r28	; 0x02
}
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <MGPIO_VoidSetPinValue>:

void MGPIO_VoidSetPinValue(enum GPIO_PORT_ID_t GPIO_PORT_ID, u8 Copy_u8PinNo, enum GPIO_VALUE_t GPIO_VALUE)
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	d6 2f       	mov	r29, r22
 260:	c4 2f       	mov	r28, r20
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 262:	73 df       	rcall	.-282    	; 0x14a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 264:	00 97       	sbiw	r24, 0x00	; 0
 266:	e9 f0       	breq	.+58     	; 0x2a2 <MGPIO_VoidSetPinValue+0x48>
		return;
	switch(GPIO_VALUE)
 268:	cc 23       	and	r28, r28
 26a:	19 f0       	breq	.+6      	; 0x272 <MGPIO_VoidSetPinValue+0x18>
 26c:	c1 30       	cpi	r28, 0x01	; 1
 26e:	71 f0       	breq	.+28     	; 0x28c <MGPIO_VoidSetPinValue+0x32>
 270:	18 c0       	rjmp	.+48     	; 0x2a2 <MGPIO_VoidSetPinValue+0x48>
	{
		case GPIO_LOW:
			CLR_BIT(P->PORT, Copy_u8PinNo);
 272:	fc 01       	movw	r30, r24
 274:	42 81       	ldd	r20, Z+2	; 0x02
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <MGPIO_VoidSetPinValue+0x26>
 27c:	22 0f       	add	r18, r18
 27e:	33 1f       	adc	r19, r19
 280:	da 95       	dec	r29
 282:	e2 f7       	brpl	.-8      	; 0x27c <MGPIO_VoidSetPinValue+0x22>
 284:	20 95       	com	r18
 286:	24 23       	and	r18, r20
 288:	22 83       	std	Z+2, r18	; 0x02
			break;
 28a:	0b c0       	rjmp	.+22     	; 0x2a2 <MGPIO_VoidSetPinValue+0x48>
		case GPIO_HIGH:
			SET_BIT(P->PORT, Copy_u8PinNo);
 28c:	fc 01       	movw	r30, r24
 28e:	42 81       	ldd	r20, Z+2	; 0x02
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <MGPIO_VoidSetPinValue+0x40>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	da 95       	dec	r29
 29c:	e2 f7       	brpl	.-8      	; 0x296 <MGPIO_VoidSetPinValue+0x3c>
 29e:	24 2b       	or	r18, r20
 2a0:	22 83       	std	Z+2, r18	; 0x02
			break;
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <GIE_voidEnable>:
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void)
{
	SET_BIT(SREG, 7);
 2a8:	8f b7       	in	r24, 0x3f	; 63
 2aa:	80 68       	ori	r24, 0x80	; 128
 2ac:	8f bf       	out	0x3f, r24	; 63
 2ae:	08 95       	ret

000002b0 <MEXTI_voidSetCallback>:
		return;
}

void MEXTI_voidSetCallbackPCINT	(enum EXTI_PCINT_num EXTI_PCINT,void (*Local_Callback)(void))
{
	Global_CallbackPCINT[EXTI_PCINT]= Local_Callback;
 2b0:	e8 2f       	mov	r30, r24
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e4 5f       	subi	r30, 0xF4	; 244
 2ba:	fd 4f       	sbci	r31, 0xFD	; 253
 2bc:	71 83       	std	Z+1, r23	; 0x01
 2be:	60 83       	st	Z, r22
 2c0:	08 95       	ret

000002c2 <MEXTI_voidEnable>:
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	c8 2f       	mov	r28, r24
 2c8:	d6 2f       	mov	r29, r22
 2ca:	ee df       	rcall	.-36     	; 0x2a8 <GIE_voidEnable>
 2cc:	8c 2f       	mov	r24, r28
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	91 05       	cpc	r25, r1
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <MEXTI_voidEnable+0x16>
 2d6:	53 c0       	rjmp	.+166    	; 0x37e <MEXTI_voidEnable+0xbc>
 2d8:	fc 01       	movw	r30, r24
 2da:	88 27       	eor	r24, r24
 2dc:	e3 58       	subi	r30, 0x83	; 131
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	d0 c5       	rjmp	.+2976   	; 0xe84 <__tablejump2__>
 2e4:	e8 9a       	sbi	0x1d, 0	; 29
 2e6:	e9 e6       	ldi	r30, 0x69	; 105
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	60 81       	ld	r22, Z
 2ec:	6d 2b       	or	r22, r29
 2ee:	60 83       	st	Z, r22
 2f0:	46 c0       	rjmp	.+140    	; 0x37e <MEXTI_voidEnable+0xbc>
 2f2:	e9 9a       	sbi	0x1d, 1	; 29
 2f4:	e9 e6       	ldi	r30, 0x69	; 105
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	6d 2f       	mov	r22, r29
 2fc:	66 0f       	add	r22, r22
 2fe:	66 0f       	add	r22, r22
 300:	68 2b       	or	r22, r24
 302:	60 83       	st	Z, r22
 304:	3c c0       	rjmp	.+120    	; 0x37e <MEXTI_voidEnable+0xbc>
 306:	ea 9a       	sbi	0x1d, 2	; 29
 308:	e9 e6       	ldi	r30, 0x69	; 105
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	90 e1       	ldi	r25, 0x10	; 16
 310:	d9 9f       	mul	r29, r25
 312:	b0 01       	movw	r22, r0
 314:	11 24       	eor	r1, r1
 316:	68 2b       	or	r22, r24
 318:	60 83       	st	Z, r22
 31a:	31 c0       	rjmp	.+98     	; 0x37e <MEXTI_voidEnable+0xbc>
 31c:	eb 9a       	sbi	0x1d, 3	; 29
 31e:	e9 e6       	ldi	r30, 0x69	; 105
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	90 e4       	ldi	r25, 0x40	; 64
 326:	d9 9f       	mul	r29, r25
 328:	b0 01       	movw	r22, r0
 32a:	11 24       	eor	r1, r1
 32c:	68 2b       	or	r22, r24
 32e:	60 83       	st	Z, r22
 330:	26 c0       	rjmp	.+76     	; 0x37e <MEXTI_voidEnable+0xbc>
 332:	ec 9a       	sbi	0x1d, 4	; 29
 334:	ea e6       	ldi	r30, 0x6A	; 106
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	60 81       	ld	r22, Z
 33a:	6d 2b       	or	r22, r29
 33c:	60 83       	st	Z, r22
 33e:	1f c0       	rjmp	.+62     	; 0x37e <MEXTI_voidEnable+0xbc>
 340:	ed 9a       	sbi	0x1d, 5	; 29
 342:	ea e6       	ldi	r30, 0x6A	; 106
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	6d 2f       	mov	r22, r29
 34a:	66 0f       	add	r22, r22
 34c:	66 0f       	add	r22, r22
 34e:	68 2b       	or	r22, r24
 350:	60 83       	st	Z, r22
 352:	15 c0       	rjmp	.+42     	; 0x37e <MEXTI_voidEnable+0xbc>
 354:	ee 9a       	sbi	0x1d, 6	; 29
 356:	ea e6       	ldi	r30, 0x6A	; 106
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	90 e1       	ldi	r25, 0x10	; 16
 35e:	d9 9f       	mul	r29, r25
 360:	b0 01       	movw	r22, r0
 362:	11 24       	eor	r1, r1
 364:	68 2b       	or	r22, r24
 366:	60 83       	st	Z, r22
 368:	0a c0       	rjmp	.+20     	; 0x37e <MEXTI_voidEnable+0xbc>
 36a:	ef 9a       	sbi	0x1d, 7	; 29
 36c:	ea e6       	ldi	r30, 0x6A	; 106
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	90 e4       	ldi	r25, 0x40	; 64
 374:	d9 9f       	mul	r29, r25
 376:	b0 01       	movw	r22, r0
 378:	11 24       	eor	r1, r1
 37a:	68 2b       	or	r22, r24
 37c:	60 83       	st	Z, r22
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <__vector_1>:
}


void EXTI_VEC0()
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	0f 92       	push	r0
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT0] != 0)
 3aa:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <Global_Callback>
 3ae:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <Global_Callback+0x1>
 3b2:	30 97       	sbiw	r30, 0x00	; 0
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <__vector_1+0x34>
		Global_Callback[EXTI_INT0]();
 3b6:	19 95       	eicall
	else
		return;
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0b be       	out	0x3b, r0	; 59
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_2>:
void EXTI_VEC1()
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	0b b6       	in	r0, 0x3b	; 59
 3ea:	0f 92       	push	r0
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT1] != 0)
 404:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <Global_Callback+0x2>
 408:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <Global_Callback+0x3>
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		Global_Callback[EXTI_INT1]();
 410:	19 95       	eicall
	else
		return;
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_3>:

void EXTI_VEC2()
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	0b b6       	in	r0, 0x3b	; 59
 444:	0f 92       	push	r0
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT2] != 0)
 45e:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <Global_Callback+0x4>
 462:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <Global_Callback+0x5>
 466:	30 97       	sbiw	r30, 0x00	; 0
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_3+0x34>
		Global_Callback[EXTI_INT2]();
 46a:	19 95       	eicall
	else
		return;
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0b be       	out	0x3b, r0	; 59
 488:	0f 90       	pop	r0
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	0f 90       	pop	r0
 48e:	1f 90       	pop	r1
 490:	18 95       	reti

00000492 <__vector_4>:
void EXTI_VEC3()
{
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	0b b6       	in	r0, 0x3b	; 59
 49e:	0f 92       	push	r0
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT3] != 0)
 4b8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <Global_Callback+0x6>
 4bc:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <Global_Callback+0x7>
 4c0:	30 97       	sbiw	r30, 0x00	; 0
 4c2:	09 f0       	breq	.+2      	; 0x4c6 <__vector_4+0x34>
		Global_Callback[EXTI_INT3]();
 4c4:	19 95       	eicall
	else
		return;
}
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0b be       	out	0x3b, r0	; 59
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_5>:

void EXTI_VEC4()
{
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	0b b6       	in	r0, 0x3b	; 59
 4f8:	0f 92       	push	r0
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT4] != 0)
 512:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <Global_Callback+0x8>
 516:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <Global_Callback+0x9>
 51a:	30 97       	sbiw	r30, 0x00	; 0
 51c:	09 f0       	breq	.+2      	; 0x520 <__vector_5+0x34>
		Global_Callback[EXTI_INT4]();
 51e:	19 95       	eicall
	else
		return;
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0b be       	out	0x3b, r0	; 59
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__vector_6>:
void EXTI_VEC5()
{
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	0b b6       	in	r0, 0x3b	; 59
 552:	0f 92       	push	r0
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT5] != 0)
 56c:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <Global_Callback+0xa>
 570:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <Global_Callback+0xb>
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_6+0x34>
		Global_Callback[EXTI_INT5]();
 578:	19 95       	eicall
	else
		return;
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0b be       	out	0x3b, r0	; 59
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__vector_7>:

void EXTI_VEC6()
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	0b b6       	in	r0, 0x3b	; 59
 5ac:	0f 92       	push	r0
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	4f 93       	push	r20
 5b4:	5f 93       	push	r21
 5b6:	6f 93       	push	r22
 5b8:	7f 93       	push	r23
 5ba:	8f 93       	push	r24
 5bc:	9f 93       	push	r25
 5be:	af 93       	push	r26
 5c0:	bf 93       	push	r27
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT6] != 0)
 5c6:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <Global_Callback+0xc>
 5ca:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <Global_Callback+0xd>
 5ce:	30 97       	sbiw	r30, 0x00	; 0
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_7+0x34>
		Global_Callback[EXTI_INT6]();
 5d2:	19 95       	eicall
	else
		return;
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0b be       	out	0x3b, r0	; 59
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__vector_8>:
void EXTI_VEC7()
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	0b b6       	in	r0, 0x3b	; 59
 606:	0f 92       	push	r0
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT7] != 0)
 620:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <Global_Callback+0xe>
 624:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <Global_Callback+0xf>
 628:	30 97       	sbiw	r30, 0x00	; 0
 62a:	09 f0       	breq	.+2      	; 0x62e <__vector_8+0x34>
		Global_Callback[EXTI_INT7]();
 62c:	19 95       	eicall
	else
		return;
}
 62e:	ff 91       	pop	r31
 630:	ef 91       	pop	r30
 632:	bf 91       	pop	r27
 634:	af 91       	pop	r26
 636:	9f 91       	pop	r25
 638:	8f 91       	pop	r24
 63a:	7f 91       	pop	r23
 63c:	6f 91       	pop	r22
 63e:	5f 91       	pop	r21
 640:	4f 91       	pop	r20
 642:	3f 91       	pop	r19
 644:	2f 91       	pop	r18
 646:	0f 90       	pop	r0
 648:	0b be       	out	0x3b, r0	; 59
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <__vector_9>:


void EXTI_VEC_PCINT0()
{
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	0b b6       	in	r0, 0x3b	; 59
 660:	0f 92       	push	r0
 662:	2f 93       	push	r18
 664:	3f 93       	push	r19
 666:	4f 93       	push	r20
 668:	5f 93       	push	r21
 66a:	6f 93       	push	r22
 66c:	7f 93       	push	r23
 66e:	8f 93       	push	r24
 670:	9f 93       	push	r25
 672:	af 93       	push	r26
 674:	bf 93       	push	r27
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT0]();
 67a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <__data_end>
 67e:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <__data_end+0x1>
 682:	19 95       	eicall
}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0b be       	out	0x3b, r0	; 59
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <__vector_10>:
void EXTI_VEC_PCINT1()
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	0b b6       	in	r0, 0x3b	; 59
 6b6:	0f 92       	push	r0
 6b8:	2f 93       	push	r18
 6ba:	3f 93       	push	r19
 6bc:	4f 93       	push	r20
 6be:	5f 93       	push	r21
 6c0:	6f 93       	push	r22
 6c2:	7f 93       	push	r23
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	af 93       	push	r26
 6ca:	bf 93       	push	r27
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT1]();
 6d0:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_end+0x2>
 6d4:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <__data_end+0x3>
 6d8:	19 95       	eicall
}
 6da:	ff 91       	pop	r31
 6dc:	ef 91       	pop	r30
 6de:	bf 91       	pop	r27
 6e0:	af 91       	pop	r26
 6e2:	9f 91       	pop	r25
 6e4:	8f 91       	pop	r24
 6e6:	7f 91       	pop	r23
 6e8:	6f 91       	pop	r22
 6ea:	5f 91       	pop	r21
 6ec:	4f 91       	pop	r20
 6ee:	3f 91       	pop	r19
 6f0:	2f 91       	pop	r18
 6f2:	0f 90       	pop	r0
 6f4:	0b be       	out	0x3b, r0	; 59
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <__vector_11>:
void EXTI_VEC_PCINT2()
{
 700:	1f 92       	push	r1
 702:	0f 92       	push	r0
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	0f 92       	push	r0
 708:	11 24       	eor	r1, r1
 70a:	0b b6       	in	r0, 0x3b	; 59
 70c:	0f 92       	push	r0
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT2]();
 726:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__data_end+0x4>
 72a:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__data_end+0x5>
 72e:	19 95       	eicall
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	bf 91       	pop	r27
 736:	af 91       	pop	r26
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	7f 91       	pop	r23
 73e:	6f 91       	pop	r22
 740:	5f 91       	pop	r21
 742:	4f 91       	pop	r20
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0b be       	out	0x3b, r0	; 59
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <UART_Init>:
void (*UART_Global_Callback[8])(void)={0};


void UART_Init(enum UART_NUM uart_no)
{
	switch(uart_no)
 756:	81 30       	cpi	r24, 0x01	; 1
 758:	99 f0       	breq	.+38     	; 0x780 <UART_Init+0x2a>
 75a:	28 f0       	brcs	.+10     	; 0x766 <UART_Init+0x10>
 75c:	82 30       	cpi	r24, 0x02	; 2
 75e:	e9 f0       	breq	.+58     	; 0x79a <UART_Init+0x44>
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	41 f1       	breq	.+80     	; 0x7b4 <UART_Init+0x5e>
 764:	08 95       	ret
	{
		case UART0:
				/*According to datasheet UBRR must be set to 12 to have a baudrate of 9600*/
				USART0_REG->UBRR0H = 0;
 766:	e0 ec       	ldi	r30, 0xC0	; 192
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	15 82       	std	Z+5, r1	; 0x05
				USART0_REG->UBRR0L = 103;	
 76c:	87 e6       	ldi	r24, 0x67	; 103
 76e:	84 83       	std	Z+4, r24	; 0x04
				/*This line enables double speed mode*/
				USART0_REG->UCSR0A = (1<<1);	
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	80 83       	st	Z, r24
				/*This line selects the data frame width to be 7 data bits*/
				CLR_BIT(USART0_REG->UCSR0C, 1);
 774:	82 81       	ldd	r24, Z+2	; 0x02
 776:	8d 7f       	andi	r24, 0xFD	; 253
 778:	82 83       	std	Z+2, r24	; 0x02
				/*This line enables UART send and receive pins*/
				USART0_REG->UCSR0B = (1<<4) | (1<<3) |(1<<7);
 77a:	88 e9       	ldi	r24, 0x98	; 152
 77c:	81 83       	std	Z+1, r24	; 0x01
				break;
 77e:	08 95       	ret
		case UART1:
			/*According to datasheet UBRR must be set to 12 to have a baudrate of 9600*/
			USART1_REG->UBRR1H = 0;
 780:	e8 ec       	ldi	r30, 0xC8	; 200
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	15 82       	std	Z+5, r1	; 0x05
			USART1_REG->UBRR1L = 103;
 786:	87 e6       	ldi	r24, 0x67	; 103
 788:	84 83       	std	Z+4, r24	; 0x04
			/*This line enables double speed mode*/
			USART1_REG->UCSR1A = (1<<1);
 78a:	82 e0       	ldi	r24, 0x02	; 2
 78c:	80 83       	st	Z, r24
			/*This line selects the data frame width to be 7 data bits*/
			CLR_BIT(USART1_REG->UCSR1C, 1);
 78e:	82 81       	ldd	r24, Z+2	; 0x02
 790:	8d 7f       	andi	r24, 0xFD	; 253
 792:	82 83       	std	Z+2, r24	; 0x02
			/*This line enables UART send and receive pins*/
			USART1_REG->UCSR1B = (1<<4) | (1<<3);
 794:	88 e1       	ldi	r24, 0x18	; 24
 796:	81 83       	std	Z+1, r24	; 0x01
			break;
 798:	08 95       	ret
		case UART2:
			/*According to datasheet UBRR must be set to 12 to have a baudrate of 9600*/
			USART2_REG->UBRR2H = 0;
 79a:	e0 ed       	ldi	r30, 0xD0	; 208
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	15 82       	std	Z+5, r1	; 0x05
			USART2_REG->UBRR2L = 103;
 7a0:	87 e6       	ldi	r24, 0x67	; 103
 7a2:	84 83       	std	Z+4, r24	; 0x04
			/*This line enables double speed mode*/
			USART2_REG->UCSR2A = (1<<1);
 7a4:	82 e0       	ldi	r24, 0x02	; 2
 7a6:	80 83       	st	Z, r24
			/*This line selects the data frame width to be 7 data bits*/
			CLR_BIT(USART2_REG->UCSR2C, 1);
 7a8:	82 81       	ldd	r24, Z+2	; 0x02
 7aa:	8d 7f       	andi	r24, 0xFD	; 253
 7ac:	82 83       	std	Z+2, r24	; 0x02
			/*This line enables UART send and receive pins*/
			USART2_REG->UCSR2B = (1<<4) | (1<<3);
 7ae:	88 e1       	ldi	r24, 0x18	; 24
 7b0:	81 83       	std	Z+1, r24	; 0x01
			break;
 7b2:	08 95       	ret
		case UART3:
			/*According to datasheet UBRR must be set to 12 to have a baudrate of 9600*/
			USART3_REG->UBRR3H = 0;
 7b4:	e0 e3       	ldi	r30, 0x30	; 48
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	15 82       	std	Z+5, r1	; 0x05
			USART3_REG->UBRR3L = 103;
 7ba:	87 e6       	ldi	r24, 0x67	; 103
 7bc:	84 83       	std	Z+4, r24	; 0x04
			/*This line enables double speed mode*/
			USART3_REG->UCSR3A = (1<<1);
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	80 83       	st	Z, r24
			/*This line selects the data frame width to be 7 data bits*/
			CLR_BIT(USART3_REG->UCSR3C, 1);
 7c2:	82 81       	ldd	r24, Z+2	; 0x02
 7c4:	8d 7f       	andi	r24, 0xFD	; 253
 7c6:	82 83       	std	Z+2, r24	; 0x02
			/*This line enables UART send and receive pins*/
			USART3_REG->UCSR3B = (1<<4) | (1<<3);
 7c8:	88 e1       	ldi	r24, 0x18	; 24
 7ca:	81 83       	std	Z+1, r24	; 0x01
 7cc:	08 95       	ret

000007ce <UART_SendByte>:
			break;
	}
}
void UART_SendByte(unsigned char Byte, enum UART_NUM uart_no)
{		
		switch(uart_no)
 7ce:	61 30       	cpi	r22, 0x01	; 1
 7d0:	71 f0       	breq	.+28     	; 0x7ee <UART_SendByte+0x20>
 7d2:	28 f0       	brcs	.+10     	; 0x7de <UART_SendByte+0x10>
 7d4:	62 30       	cpi	r22, 0x02	; 2
 7d6:	99 f0       	breq	.+38     	; 0x7fe <UART_SendByte+0x30>
 7d8:	63 30       	cpi	r22, 0x03	; 3
 7da:	a1 f0       	breq	.+40     	; 0x804 <UART_SendByte+0x36>
 7dc:	08 95       	ret
		{
			case UART0:
				/*This line polls UDRE flag to check if Tx register can be written*/
				while ((USART0_REG->UCSR0A & (1<<5)) == 0) { /*Do nothing*/}
 7de:	e0 ec       	ldi	r30, 0xC0	; 192
 7e0:	f0 e0       	ldi	r31, 0x00	; 0
 7e2:	90 81       	ld	r25, Z
 7e4:	95 ff       	sbrs	r25, 5
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <UART_SendByte+0x14>
				
				/*Assign data to UDR to be sent over UART*/
				USART0_REG->UDR0 = Byte;
 7e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
				break;
 7ec:	08 95       	ret
				
			case UART1:
				/*This line polls UDRE flag to check if Tx register can be written*/
				while ((USART1_REG->UCSR1A & (1<<5)) == 0) { /*Do nothing*/}
 7ee:	e8 ec       	ldi	r30, 0xC8	; 200
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	90 81       	ld	r25, Z
 7f4:	95 ff       	sbrs	r25, 5
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <UART_SendByte+0x24>
				
				/*Assign data to UDR to be sent over UART*/
				USART1_REG->UDR1 = Byte;
 7f8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
				break;
 7fc:	08 95       	ret
			case UART2:
				/*This line polls UDRE flag to check if Tx register can be written*/
				//while ((USART2_REG->UCSR2A & (1<<5)) == 0) { /*Do nothing*/}
				
				/*Assign data to UDR to be sent over UART*/
				USART2_REG->UDR2 = Byte;
 7fe:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
				break;
 802:	08 95       	ret
			case UART3:
				/*This line polls UDRE flag to check if Tx register can be written*/
				//while ((USART3_REG->UCSR3A & (1<<5)) == 0) { /*Do nothing*/}
				
				/*Assign data to UDR to be sent over UART*/
				USART3_REG->UDR3 = Byte;
 804:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 808:	08 95       	ret

0000080a <UART_ReceiveByte>:
				break;
		}
}
unsigned char UART_ReceiveByte(enum UART_NUM uart_no)
{		
		switch(uart_no)
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	49 f0       	breq	.+18     	; 0x820 <UART_ReceiveByte+0x16>
 80e:	28 f0       	brcs	.+10     	; 0x81a <UART_ReceiveByte+0x10>
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	71 f0       	breq	.+28     	; 0x830 <UART_ReceiveByte+0x26>
 814:	83 30       	cpi	r24, 0x03	; 3
 816:	79 f0       	breq	.+30     	; 0x836 <UART_ReceiveByte+0x2c>
 818:	16 c0       	rjmp	.+44     	; 0x846 <UART_ReceiveByte+0x3c>
		{
			case UART0:
				/*This line polls RXC flag to check if Rx register can be read*/
				//while ((USART0_REG->UCSR0A & (1<<7)) == 0) { /*Do nothing*/}
				//if(USART0_REG->UCSR0A & (1<<5) == 0)
				return USART0_REG->UDR0;
 81a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 81e:	08 95       	ret

			case UART1:
				/*This line polls RXC flag to check if Rx register can be read*/
				while ((USART1_REG->UCSR1A & (1<<7)) == 0) { /*Do nothing*/}
 820:	e8 ec       	ldi	r30, 0xC8	; 200
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	88 23       	and	r24, r24
 828:	ec f7       	brge	.-6      	; 0x824 <UART_ReceiveByte+0x1a>
				return USART1_REG->UDR1;
 82a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 82e:	08 95       	ret
			case UART2:
				/*This line polls RXC flag to check if Rx register can be read*/
				//while ((USART2_REG->UCSR2A & (1<<7)) == 0) { /*Do nothing*/}
				return USART2_REG->UDR2;
 830:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 834:	08 95       	ret
			case UART3:
				/*This line polls RXC flag to check if Rx register can be read*/
				while ((USART3_REG->UCSR3A & (1<<7)) == 0) { /*Do nothing*/}
 836:	e0 e3       	ldi	r30, 0x30	; 48
 838:	f1 e0       	ldi	r31, 0x01	; 1
 83a:	80 81       	ld	r24, Z
 83c:	88 23       	and	r24, r24
 83e:	ec f7       	brge	.-6      	; 0x83a <UART_ReceiveByte+0x30>
				return USART3_REG->UDR3;
 840:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 844:	08 95       	ret
			default:
				break;
		}
	return 0;
 846:	80 e0       	ldi	r24, 0x00	; 0
}
 848:	08 95       	ret

0000084a <MUART_voidSetCallback>:

void MUART_voidSetCallback(enum UART_NUM uart_no,void (*Local_Callback)(void))
{
	UART_Global_Callback[uart_no]= Local_Callback;	
 84a:	e8 2f       	mov	r30, r24
 84c:	f0 e0       	ldi	r31, 0x00	; 0
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	e4 5e       	subi	r30, 0xE4	; 228
 854:	fd 4f       	sbci	r31, 0xFD	; 253
 856:	71 83       	std	Z+1, r23	; 0x01
 858:	60 83       	st	Z, r22
 85a:	08 95       	ret

0000085c <__vector_25>:
}

void USART0_RX()
{
 85c:	1f 92       	push	r1
 85e:	0f 92       	push	r0
 860:	0f b6       	in	r0, 0x3f	; 63
 862:	0f 92       	push	r0
 864:	11 24       	eor	r1, r1
 866:	0b b6       	in	r0, 0x3b	; 59
 868:	0f 92       	push	r0
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
	if (UART_Global_Callback[UART0] != 0)
 882:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <UART_Global_Callback>
 886:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <UART_Global_Callback+0x1>
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	09 f0       	breq	.+2      	; 0x890 <__vector_25+0x34>
		UART_Global_Callback[UART0]();
 88e:	19 95       	eicall
	else
		return;	
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0b be       	out	0x3b, r0	; 59
 8ac:	0f 90       	pop	r0
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	0f 90       	pop	r0
 8b2:	1f 90       	pop	r1
 8b4:	18 95       	reti

000008b6 <HLED_Void_AttachLED>:

#include "LED_interface.h"


void HLED_Void_AttachLED(enum LEDS_t LED)
{
 8b6:	cf 93       	push	r28
 8b8:	c8 2f       	mov	r28, r24
	MGPIO_VoidSetPinDirection(LEDS_PORT, LED, GPIO_OUTPUT);
 8ba:	41 e0       	ldi	r20, 0x01	; 1
 8bc:	68 2f       	mov	r22, r24
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	8a dc       	rcall	.-1772   	; 0x1d6 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinValue(LEDS_PORT, LED, GPIO_LOW);	
 8c2:	40 e0       	ldi	r20, 0x00	; 0
 8c4:	6c 2f       	mov	r22, r28
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	c8 dc       	rcall	.-1648   	; 0x25a <MGPIO_VoidSetPinValue>
};
 8ca:	cf 91       	pop	r28
 8cc:	08 95       	ret

000008ce <HLED_Void_LEDState>:
void HLED_Void_LEDState(enum LEDS_t LED, u8 LED_State)
{
 8ce:	46 2f       	mov	r20, r22
	MGPIO_VoidSetPinValue(LEDS_PORT, LED, LED_State);
 8d0:	68 2f       	mov	r22, r24
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	c2 cc       	rjmp	.-1660   	; 0x25a <MGPIO_VoidSetPinValue>
 8d6:	08 95       	ret

000008d8 <HSwitch_Void_AttachSwitch>:
 */ 
#include "../../01 - MCAL/3 - EXTI_DRIVER/EXTI_interface.h"
#include "SWITCH_interface.h"

void HSwitch_Void_AttachSwitch(enum SWITCH_t Switch, void (*Local_Callback)(void))
{
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	c8 2f       	mov	r28, r24
 8e0:	8b 01       	movw	r16, r22
	if (Switch<4)
 8e2:	84 30       	cpi	r24, 0x04	; 4
 8e4:	28 f4       	brcc	.+10     	; 0x8f0 <HSwitch_Void_AttachSwitch+0x18>
		MGPIO_VoidSetPinDirection(SWITCH_PORT1, Switch, GPIO_INPUT_PULLUP);
 8e6:	42 e0       	ldi	r20, 0x02	; 2
 8e8:	68 2f       	mov	r22, r24
 8ea:	83 e0       	ldi	r24, 0x03	; 3
 8ec:	74 dc       	rcall	.-1816   	; 0x1d6 <MGPIO_VoidSetPinDirection>
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <HSwitch_Void_AttachSwitch+0x20>
	else
		MGPIO_VoidSetPinDirection(SWITCH_PORT2, Switch, GPIO_INPUT_PULLUP);
 8f0:	42 e0       	ldi	r20, 0x02	; 2
 8f2:	68 2f       	mov	r22, r24
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	6f dc       	rcall	.-1826   	; 0x1d6 <MGPIO_VoidSetPinDirection>
	MEXTI_voidEnable(Switch,rising_edge);
 8f8:	63 e0       	ldi	r22, 0x03	; 3
 8fa:	8c 2f       	mov	r24, r28
 8fc:	e2 dc       	rcall	.-1596   	; 0x2c2 <MEXTI_voidEnable>
	MEXTI_voidSetCallback(Switch, Local_Callback);
 8fe:	b8 01       	movw	r22, r16
 900:	8c 2f       	mov	r24, r28
 902:	d6 dc       	rcall	.-1620   	; 0x2b0 <MEXTI_voidSetCallback>
 904:	cf 91       	pop	r28

	
}
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	08 95       	ret

0000090c <H7SEG_Void_Setup7SEG>:

#include "7SEG_interface.h"
u8 SevenSEG_VALUE [5]= {63,6,91,79,102};
void H7SEG_Void_Setup7SEG()
{
	MGPIO_VoidSetPortDirection(SevenSEG_PORT, GPIO_OUTPUT);
 90c:	61 e0       	ldi	r22, 0x01	; 1
 90e:	8a e0       	ldi	r24, 0x0A	; 10
 910:	4a cc       	rjmp	.-1900   	; 0x1a6 <MGPIO_VoidSetPortDirection>
 912:	08 95       	ret

00000914 <H7SEG_Void_7SEGState>:
}

void H7SEG_Void_7SEGState(u8 SevenSEG_VALUE)

{
	MGPIO_VoidSetPortValue(SevenSEG_PORT, SevenSEG_VALUE);	
 914:	68 2f       	mov	r22, r24
 916:	8a e0       	ldi	r24, 0x0A	; 10
 918:	97 cc       	rjmp	.-1746   	; 0x248 <MGPIO_VoidSetPortValue>
 91a:	08 95       	ret

0000091c <HDCMOTOR_Void_SetupMotorDriver>:

#include "DCMOTOR_interface.h"

void HDCMOTOR_Void_SetupMotorDriver()
{
	MGPIO_VoidSetPinDirection(DCMOTOR_PORT, IN1_Pin, GPIO_OUTPUT);
 91c:	41 e0       	ldi	r20, 0x01	; 1
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	85 e0       	ldi	r24, 0x05	; 5
 922:	59 dc       	rcall	.-1870   	; 0x1d6 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinDirection(DCMOTOR_PORT, IN2_Pin, GPIO_OUTPUT);
 924:	41 e0       	ldi	r20, 0x01	; 1
 926:	61 e0       	ldi	r22, 0x01	; 1
 928:	85 e0       	ldi	r24, 0x05	; 5
 92a:	55 dc       	rcall	.-1878   	; 0x1d6 <MGPIO_VoidSetPinDirection>
	MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN1_Pin, GPIO_LOW);
 92c:	40 e0       	ldi	r20, 0x00	; 0
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	85 e0       	ldi	r24, 0x05	; 5
 932:	93 dc       	rcall	.-1754   	; 0x25a <MGPIO_VoidSetPinValue>
	MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN2_Pin, GPIO_LOW);
 934:	40 e0       	ldi	r20, 0x00	; 0
 936:	61 e0       	ldi	r22, 0x01	; 1
 938:	85 e0       	ldi	r24, 0x05	; 5
 93a:	8f cc       	rjmp	.-1762   	; 0x25a <MGPIO_VoidSetPinValue>
 93c:	08 95       	ret

0000093e <HDCMOTOR_Void_MotorDirection>:
}

void HDCMOTOR_Void_MotorDirection(u8 Copy_u8_Direction)
{
	if (Copy_u8_Direction == CLOCKWISE)
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	49 f4       	brne	.+18     	; 0x954 <HDCMOTOR_Void_MotorDirection+0x16>
	{
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN1_Pin, GPIO_HIGH);
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	85 e0       	ldi	r24, 0x05	; 5
 948:	88 dc       	rcall	.-1776   	; 0x25a <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN2_Pin, GPIO_LOW);
 94a:	40 e0       	ldi	r20, 0x00	; 0
 94c:	61 e0       	ldi	r22, 0x01	; 1
 94e:	85 e0       	ldi	r24, 0x05	; 5
 950:	84 cc       	rjmp	.-1784   	; 0x25a <MGPIO_VoidSetPinValue>
 952:	08 95       	ret
	}
	else if (Copy_u8_Direction == ANTI_CLOCKWISE)
 954:	81 30       	cpi	r24, 0x01	; 1
 956:	49 f4       	brne	.+18     	; 0x96a <HDCMOTOR_Void_MotorDirection+0x2c>
	{
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN1_Pin, GPIO_LOW);
 958:	40 e0       	ldi	r20, 0x00	; 0
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	85 e0       	ldi	r24, 0x05	; 5
 95e:	7d dc       	rcall	.-1798   	; 0x25a <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN2_Pin, GPIO_HIGH);
 960:	41 e0       	ldi	r20, 0x01	; 1
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	85 e0       	ldi	r24, 0x05	; 5
 966:	79 cc       	rjmp	.-1806   	; 0x25a <MGPIO_VoidSetPinValue>
 968:	08 95       	ret
	}
	else
	{
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN1_Pin, GPIO_LOW);
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	85 e0       	ldi	r24, 0x05	; 5
 970:	74 dc       	rcall	.-1816   	; 0x25a <MGPIO_VoidSetPinValue>
		MGPIO_VoidSetPinValue(DCMOTOR_PORT, IN2_Pin, GPIO_LOW);
 972:	40 e0       	ldi	r20, 0x00	; 0
 974:	61 e0       	ldi	r22, 0x01	; 1
 976:	85 e0       	ldi	r24, 0x05	; 5
 978:	70 cc       	rjmp	.-1824   	; 0x25a <MGPIO_VoidSetPinValue>
 97a:	08 95       	ret

0000097c <SW_EMERGENCY_Function>:
    {
	}
}
void SW_EMERGENCY_Function(void)
{
	UART_SendByte(5, UART2);
 97c:	62 e0       	ldi	r22, 0x02	; 2
 97e:	85 e0       	ldi	r24, 0x05	; 5
 980:	26 cf       	rjmp	.-436    	; 0x7ce <UART_SendByte>
 982:	08 95       	ret

00000984 <SW_GND_Function>:
}
void SW_GND_Function(void)
{
 984:	cf 93       	push	r28
	u8 counter = current_level;
 986:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>
	u8 upward_flag = 0;

	if (current_level>0)
 98a:	cc 23       	and	r28, r28
 98c:	b1 f0       	breq	.+44     	; 0x9ba <SW_GND_Function+0x36>
	{
		upward_flag = 1;
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	81 e0       	ldi	r24, 0x01	; 1
 992:	9d df       	rcall	.-198    	; 0x8ce <HLED_Void_LEDState>
	}
	
	if (upward_flag == 1)
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	d3 df       	rcall	.-90     	; 0x93e <HDCMOTOR_Void_MotorDirection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 998:	2f ef       	ldi	r18, 0xFF	; 255
 99a:	8e e9       	ldi	r24, 0x9E	; 158
 99c:	94 e2       	ldi	r25, 0x24	; 36
 99e:	21 50       	subi	r18, 0x01	; 1
 9a0:	80 40       	sbci	r24, 0x00	; 0
 9a2:	90 40       	sbci	r25, 0x00	; 0
 9a4:	e1 f7       	brne	.-8      	; 0x99e <SW_GND_Function+0x1a>
 9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <SW_GND_Function+0x24>
 9a8:	00 00       	nop
		while (counter>0)
		{
			
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 9aa:	ec 2f       	mov	r30, r28
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	e0 50       	subi	r30, 0x00	; 0
 9b0:	fe 4f       	sbci	r31, 0xFE	; 254
 9b2:	80 81       	ld	r24, Z
 9b4:	af df       	rcall	.-162    	; 0x914 <H7SEG_Void_7SEGState>
			counter--;
 9b6:	c1 50       	subi	r28, 0x01	; 1
	}
	
	if (upward_flag == 1)
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>0)
 9b8:	79 f7       	brne	.-34     	; 0x998 <SW_GND_Function+0x14>
 9ba:	2f ef       	ldi	r18, 0xFF	; 255
 9bc:	8e e9       	ldi	r24, 0x9E	; 158
 9be:	94 e2       	ldi	r25, 0x24	; 36
 9c0:	21 50       	subi	r18, 0x01	; 1
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	90 40       	sbci	r25, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <SW_GND_Function+0x3c>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <SW_GND_Function+0x46>
			counter--;
			
		}
	}
	_delay_ms(1500);
	H7SEG_Void_7SEGState(ZERO);
 9ca:	00 00       	nop
 9cc:	8f e3       	ldi	r24, 0x3F	; 63
 9ce:	a2 df       	rcall	.-188    	; 0x914 <H7SEG_Void_7SEGState>
 9d0:	2f ef       	ldi	r18, 0xFF	; 255
 9d2:	8e e9       	ldi	r24, 0x9E	; 158
 9d4:	94 e2       	ldi	r25, 0x24	; 36
 9d6:	21 50       	subi	r18, 0x01	; 1
 9d8:	80 40       	sbci	r24, 0x00	; 0
 9da:	90 40       	sbci	r25, 0x00	; 0
 9dc:	e1 f7       	brne	.-8      	; 0x9d6 <SW_GND_Function+0x52>
 9de:	00 c0       	rjmp	.+0      	; 0x9e0 <SW_GND_Function+0x5c>
	_delay_ms(1500);
	HDCMOTOR_Void_MotorDirection(STOP);
 9e0:	00 00       	nop
 9e2:	80 e0       	ldi	r24, 0x00	; 0
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 9e4:	ac df       	rcall	.-168    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 9e6:	60 e0       	ldi	r22, 0x00	; 0
 9e8:	80 e0       	ldi	r24, 0x00	; 0
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 9ea:	71 df       	rcall	.-286    	; 0x8ce <HLED_Void_LEDState>
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	81 e0       	ldi	r24, 0x01	; 1
	current_level=0;
 9f0:	6e df       	rcall	.-292    	; 0x8ce <HLED_Void_LEDState>
 9f2:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <current_level>
	UART_SendByte(5, UART2);
 9f6:	62 e0       	ldi	r22, 0x02	; 2
 9f8:	85 e0       	ldi	r24, 0x05	; 5
 9fa:	e9 de       	rcall	.-558    	; 0x7ce <UART_SendByte>
}
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <SW_L1_Function>:
void SW_L1_Function(void)
{	
 a00:	cf 93       	push	r28
	u8 counter = current_level;
 a02:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>
	u8 upward_flag = 0;
	if (current_level<1)
 a06:	c1 11       	cpse	r28, r1
 a08:	04 c0       	rjmp	.+8      	; 0xa12 <SW_L1_Function+0x12>
	{
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
 a0a:	61 e0       	ldi	r22, 0x01	; 1
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	5f df       	rcall	.-322    	; 0x8ce <HLED_Void_LEDState>
 a10:	44 c0       	rjmp	.+136    	; 0xa9a <SW_L1_Function+0x9a>
	}
	else if (current_level>1)
 a12:	c2 30       	cpi	r28, 0x02	; 2
 a14:	08 f4       	brcc	.+2      	; 0xa18 <SW_L1_Function+0x18>
 a16:	41 c0       	rjmp	.+130    	; 0xa9a <SW_L1_Function+0x9a>
	{
		upward_flag = 1;
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	58 df       	rcall	.-336    	; 0x8ce <HLED_Void_LEDState>
			
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	8e df       	rcall	.-228    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 a22:	13 c0       	rjmp	.+38     	; 0xa4a <SW_L1_Function+0x4a>
 a24:	2f ef       	ldi	r18, 0xFF	; 255
 a26:	8e e9       	ldi	r24, 0x9E	; 158
 a28:	94 e2       	ldi	r25, 0x24	; 36
 a2a:	21 50       	subi	r18, 0x01	; 1
 a2c:	80 40       	sbci	r24, 0x00	; 0
 a2e:	90 40       	sbci	r25, 0x00	; 0
 a30:	e1 f7       	brne	.-8      	; 0xa2a <SW_L1_Function+0x2a>
 a32:	00 c0       	rjmp	.+0      	; 0xa34 <SW_L1_Function+0x34>
 a34:	00 00       	nop
 a36:	ec 2f       	mov	r30, r28
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=1)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	e0 50       	subi	r30, 0x00	; 0
 a3c:	fe 4f       	sbci	r31, 0xFE	; 254
 a3e:	80 81       	ld	r24, Z
 a40:	69 df       	rcall	.-302    	; 0x914 <H7SEG_Void_7SEGState>
 a42:	cf 5f       	subi	r28, 0xFF	; 255
			counter++;
 a44:	c2 30       	cpi	r28, 0x02	; 2
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=1)
 a46:	71 f7       	brne	.-36     	; 0xa24 <SW_L1_Function+0x24>
 a48:	11 c0       	rjmp	.+34     	; 0xa6c <SW_L1_Function+0x6c>
 a4a:	2f ef       	ldi	r18, 0xFF	; 255
 a4c:	8e e9       	ldi	r24, 0x9E	; 158
 a4e:	94 e2       	ldi	r25, 0x24	; 36
 a50:	21 50       	subi	r18, 0x01	; 1
 a52:	80 40       	sbci	r24, 0x00	; 0
 a54:	90 40       	sbci	r25, 0x00	; 0
 a56:	e1 f7       	brne	.-8      	; 0xa50 <SW_L1_Function+0x50>
 a58:	00 c0       	rjmp	.+0      	; 0xa5a <SW_L1_Function+0x5a>
 a5a:	00 00       	nop
 a5c:	ec 2f       	mov	r30, r28
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=1)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	e0 50       	subi	r30, 0x00	; 0
 a62:	fe 4f       	sbci	r31, 0xFE	; 254
 a64:	80 81       	ld	r24, Z
 a66:	56 df       	rcall	.-340    	; 0x914 <H7SEG_Void_7SEGState>
 a68:	c1 50       	subi	r28, 0x01	; 1
			counter--;
 a6a:	79 f7       	brne	.-34     	; 0xa4a <SW_L1_Function+0x4a>
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=1)
 a6c:	2f ef       	ldi	r18, 0xFF	; 255
 a6e:	8e e9       	ldi	r24, 0x9E	; 158
 a70:	94 e2       	ldi	r25, 0x24	; 36
 a72:	21 50       	subi	r18, 0x01	; 1
 a74:	80 40       	sbci	r24, 0x00	; 0
 a76:	90 40       	sbci	r25, 0x00	; 0
 a78:	e1 f7       	brne	.-8      	; 0xa72 <SW_L1_Function+0x72>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <SW_L1_Function+0x7c>
 a7c:	00 00       	nop
			counter--;
			
		}
	}
	_delay_ms(1500);
	HDCMOTOR_Void_MotorDirection(STOP);
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	5e df       	rcall	.-324    	; 0x93e <HDCMOTOR_Void_MotorDirection>

	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 a82:	60 e0       	ldi	r22, 0x00	; 0
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	23 df       	rcall	.-442    	; 0x8ce <HLED_Void_LEDState>
 a88:	60 e0       	ldi	r22, 0x00	; 0
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	20 df       	rcall	.-448    	; 0x8ce <HLED_Void_LEDState>
 a8e:	81 e0       	ldi	r24, 0x01	; 1
	
	current_level=1;
 a90:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <current_level>
 a94:	62 e0       	ldi	r22, 0x02	; 2
	UART_SendByte(1, UART2);
 a96:	9b de       	rcall	.-714    	; 0x7ce <UART_SendByte>
 a98:	03 c0       	rjmp	.+6      	; 0xaa0 <SW_L1_Function+0xa0>
 a9a:	82 e0       	ldi	r24, 0x02	; 2
}
 a9c:	50 df       	rcall	.-352    	; 0x93e <HDCMOTOR_Void_MotorDirection>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 a9e:	c2 cf       	rjmp	.-124    	; 0xa24 <SW_L1_Function+0x24>
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <SW_L2_Function>:
 aa4:	cf 93       	push	r28
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
	
	current_level=1;
	UART_SendByte(1, UART2);
}
 aa6:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>

void SW_L2_Function(void)
{
	u8 counter = current_level;
	u8 upward_flag = 0;
	if (current_level<2)
 aaa:	c2 30       	cpi	r28, 0x02	; 2
 aac:	40 f4       	brcc	.+16     	; 0xabe <SW_L2_Function+0x1a>
	{
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
 aae:	61 e0       	ldi	r22, 0x01	; 1
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	0d df       	rcall	.-486    	; 0x8ce <HLED_Void_LEDState>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 ab4:	82 e0       	ldi	r24, 0x02	; 2
 ab6:	43 df       	rcall	.-378    	; 0x93e <HDCMOTOR_Void_MotorDirection>
		while (counter<=2)
 ab8:	c3 30       	cpi	r28, 0x03	; 3
 aba:	78 f5       	brcc	.+94     	; 0xb1a <SW_L2_Function+0x76>
 abc:	09 c0       	rjmp	.+18     	; 0xad0 <SW_L2_Function+0x2c>
	u8 upward_flag = 0;
	if (current_level<2)
	{
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
	}
	else if (current_level>2)
 abe:	c3 30       	cpi	r28, 0x03	; 3
 ac0:	08 f4       	brcc	.+2      	; 0xac4 <SW_L2_Function+0x20>
 ac2:	42 c0       	rjmp	.+132    	; 0xb48 <SW_L2_Function+0xa4>
	{
		upward_flag = 1;
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 ac4:	61 e0       	ldi	r22, 0x01	; 1
 ac6:	81 e0       	ldi	r24, 0x01	; 1
			
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 ac8:	02 df       	rcall	.-508    	; 0x8ce <HLED_Void_LEDState>
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	38 df       	rcall	.-400    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 ace:	13 c0       	rjmp	.+38     	; 0xaf6 <SW_L2_Function+0x52>
 ad0:	2f ef       	ldi	r18, 0xFF	; 255
 ad2:	8e e9       	ldi	r24, 0x9E	; 158
 ad4:	94 e2       	ldi	r25, 0x24	; 36
 ad6:	21 50       	subi	r18, 0x01	; 1
 ad8:	80 40       	sbci	r24, 0x00	; 0
 ada:	90 40       	sbci	r25, 0x00	; 0
 adc:	e1 f7       	brne	.-8      	; 0xad6 <SW_L2_Function+0x32>
 ade:	00 c0       	rjmp	.+0      	; 0xae0 <SW_L2_Function+0x3c>
 ae0:	00 00       	nop
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=2)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 ae2:	ec 2f       	mov	r30, r28
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	e0 50       	subi	r30, 0x00	; 0
 ae8:	fe 4f       	sbci	r31, 0xFE	; 254
 aea:	80 81       	ld	r24, Z
 aec:	13 df       	rcall	.-474    	; 0x914 <H7SEG_Void_7SEGState>
			counter++;
 aee:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=2)
 af0:	c3 30       	cpi	r28, 0x03	; 3
 af2:	71 f7       	brne	.-36     	; 0xad0 <SW_L2_Function+0x2c>
 af4:	12 c0       	rjmp	.+36     	; 0xb1a <SW_L2_Function+0x76>
 af6:	2f ef       	ldi	r18, 0xFF	; 255
 af8:	8e e9       	ldi	r24, 0x9E	; 158
 afa:	94 e2       	ldi	r25, 0x24	; 36
 afc:	21 50       	subi	r18, 0x01	; 1
 afe:	80 40       	sbci	r24, 0x00	; 0
 b00:	90 40       	sbci	r25, 0x00	; 0
 b02:	e1 f7       	brne	.-8      	; 0xafc <SW_L2_Function+0x58>
 b04:	00 c0       	rjmp	.+0      	; 0xb06 <SW_L2_Function+0x62>
 b06:	00 00       	nop
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=2)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 b08:	ec 2f       	mov	r30, r28
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	e0 50       	subi	r30, 0x00	; 0
 b0e:	fe 4f       	sbci	r31, 0xFE	; 254
 b10:	80 81       	ld	r24, Z
 b12:	00 df       	rcall	.-512    	; 0x914 <H7SEG_Void_7SEGState>
			counter--;
 b14:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=2)
 b16:	c1 30       	cpi	r28, 0x01	; 1
 b18:	71 f7       	brne	.-36     	; 0xaf6 <SW_L2_Function+0x52>
 b1a:	2f ef       	ldi	r18, 0xFF	; 255
 b1c:	8e e9       	ldi	r24, 0x9E	; 158
 b1e:	94 e2       	ldi	r25, 0x24	; 36
 b20:	21 50       	subi	r18, 0x01	; 1
 b22:	80 40       	sbci	r24, 0x00	; 0
 b24:	90 40       	sbci	r25, 0x00	; 0
 b26:	e1 f7       	brne	.-8      	; 0xb20 <SW_L2_Function+0x7c>
			counter--;
			
		}
	}
	_delay_ms(1500);
	HDCMOTOR_Void_MotorDirection(STOP);
 b28:	00 c0       	rjmp	.+0      	; 0xb2a <SW_L2_Function+0x86>
 b2a:	00 00       	nop
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 b2c:	80 e0       	ldi	r24, 0x00	; 0
 b2e:	07 df       	rcall	.-498    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 b30:	60 e0       	ldi	r22, 0x00	; 0
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	cc de       	rcall	.-616    	; 0x8ce <HLED_Void_LEDState>
 b36:	60 e0       	ldi	r22, 0x00	; 0
	
	current_level=2;
 b38:	81 e0       	ldi	r24, 0x01	; 1
 b3a:	c9 de       	rcall	.-622    	; 0x8ce <HLED_Void_LEDState>
 b3c:	82 e0       	ldi	r24, 0x02	; 2
	UART_SendByte(2, UART2);
 b3e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <current_level>
 b42:	62 e0       	ldi	r22, 0x02	; 2
}
 b44:	44 de       	rcall	.-888    	; 0x7ce <UART_SendByte>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 b46:	03 c0       	rjmp	.+6      	; 0xb4e <SW_L2_Function+0xaa>
 b48:	82 e0       	ldi	r24, 0x02	; 2
 b4a:	f9 de       	rcall	.-526    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 b4c:	c1 cf       	rjmp	.-126    	; 0xad0 <SW_L2_Function+0x2c>
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
	
	current_level=2;
	UART_SendByte(2, UART2);
}
 b4e:	cf 91       	pop	r28
 b50:	08 95       	ret

00000b52 <SW_L3_Function>:
void SW_L3_Function(void)
{
 b52:	cf 93       	push	r28
	u8 counter = current_level;
 b54:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>
	u8 upward_flag = 0;
	if (current_level<3)
 b58:	c3 30       	cpi	r28, 0x03	; 3
 b5a:	40 f4       	brcc	.+16     	; 0xb6c <SW_L3_Function+0x1a>
	{
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
 b5c:	61 e0       	ldi	r22, 0x01	; 1
 b5e:	80 e0       	ldi	r24, 0x00	; 0
 b60:	b6 de       	rcall	.-660    	; 0x8ce <HLED_Void_LEDState>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 b62:	82 e0       	ldi	r24, 0x02	; 2
 b64:	ec de       	rcall	.-552    	; 0x93e <HDCMOTOR_Void_MotorDirection>
		while (counter<=3)
 b66:	c4 30       	cpi	r28, 0x04	; 4
 b68:	50 f0       	brcs	.+20     	; 0xb7e <SW_L3_Function+0x2c>
 b6a:	2e c0       	rjmp	.+92     	; 0xbc8 <SW_L3_Function+0x76>
	u8 upward_flag = 0;
	if (current_level<3)
	{
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
	}
	else if (current_level>3)
 b6c:	c4 30       	cpi	r28, 0x04	; 4
 b6e:	08 f4       	brcc	.+2      	; 0xb72 <SW_L3_Function+0x20>
 b70:	42 c0       	rjmp	.+132    	; 0xbf6 <SW_L3_Function+0xa4>
	{
		upward_flag = 1;
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 b72:	61 e0       	ldi	r22, 0x01	; 1
 b74:	81 e0       	ldi	r24, 0x01	; 1
			
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 b76:	ab de       	rcall	.-682    	; 0x8ce <HLED_Void_LEDState>
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	e1 de       	rcall	.-574    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 b7c:	13 c0       	rjmp	.+38     	; 0xba4 <SW_L3_Function+0x52>
 b7e:	2f ef       	ldi	r18, 0xFF	; 255
 b80:	8e e9       	ldi	r24, 0x9E	; 158
 b82:	94 e2       	ldi	r25, 0x24	; 36
 b84:	21 50       	subi	r18, 0x01	; 1
 b86:	80 40       	sbci	r24, 0x00	; 0
 b88:	90 40       	sbci	r25, 0x00	; 0
 b8a:	e1 f7       	brne	.-8      	; 0xb84 <SW_L3_Function+0x32>
 b8c:	00 c0       	rjmp	.+0      	; 0xb8e <SW_L3_Function+0x3c>
 b8e:	00 00       	nop
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=3)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 b90:	ec 2f       	mov	r30, r28
 b92:	f0 e0       	ldi	r31, 0x00	; 0
 b94:	e0 50       	subi	r30, 0x00	; 0
 b96:	fe 4f       	sbci	r31, 0xFE	; 254
 b98:	80 81       	ld	r24, Z
 b9a:	bc de       	rcall	.-648    	; 0x914 <H7SEG_Void_7SEGState>
			counter++;
 b9c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=3)
 b9e:	c4 30       	cpi	r28, 0x04	; 4
 ba0:	71 f7       	brne	.-36     	; 0xb7e <SW_L3_Function+0x2c>
 ba2:	12 c0       	rjmp	.+36     	; 0xbc8 <SW_L3_Function+0x76>
 ba4:	2f ef       	ldi	r18, 0xFF	; 255
 ba6:	8e e9       	ldi	r24, 0x9E	; 158
 ba8:	94 e2       	ldi	r25, 0x24	; 36
 baa:	21 50       	subi	r18, 0x01	; 1
 bac:	80 40       	sbci	r24, 0x00	; 0
 bae:	90 40       	sbci	r25, 0x00	; 0
 bb0:	e1 f7       	brne	.-8      	; 0xbaa <SW_L3_Function+0x58>
 bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <SW_L3_Function+0x62>
 bb4:	00 00       	nop
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=3)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 bb6:	ec 2f       	mov	r30, r28
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	e0 50       	subi	r30, 0x00	; 0
 bbc:	fe 4f       	sbci	r31, 0xFE	; 254
 bbe:	80 81       	ld	r24, Z
 bc0:	a9 de       	rcall	.-686    	; 0x914 <H7SEG_Void_7SEGState>
			counter--;
 bc2:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=3)
 bc4:	c2 30       	cpi	r28, 0x02	; 2
 bc6:	71 f7       	brne	.-36     	; 0xba4 <SW_L3_Function+0x52>
 bc8:	2f ef       	ldi	r18, 0xFF	; 255
 bca:	8e e9       	ldi	r24, 0x9E	; 158
 bcc:	94 e2       	ldi	r25, 0x24	; 36
 bce:	21 50       	subi	r18, 0x01	; 1
 bd0:	80 40       	sbci	r24, 0x00	; 0
 bd2:	90 40       	sbci	r25, 0x00	; 0
 bd4:	e1 f7       	brne	.-8      	; 0xbce <SW_L3_Function+0x7c>
			counter--;
			
		}
	}
	_delay_ms(1500);
	HDCMOTOR_Void_MotorDirection(STOP);
 bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <SW_L3_Function+0x86>
 bd8:	00 00       	nop
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 bda:	80 e0       	ldi	r24, 0x00	; 0
 bdc:	b0 de       	rcall	.-672    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 bde:	60 e0       	ldi	r22, 0x00	; 0
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	75 de       	rcall	.-790    	; 0x8ce <HLED_Void_LEDState>
 be4:	60 e0       	ldi	r22, 0x00	; 0
	
	current_level=3;
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	72 de       	rcall	.-796    	; 0x8ce <HLED_Void_LEDState>
 bea:	83 e0       	ldi	r24, 0x03	; 3
	UART_SendByte(3, UART2);
 bec:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <current_level>
 bf0:	62 e0       	ldi	r22, 0x02	; 2
}
 bf2:	ed dd       	rcall	.-1062   	; 0x7ce <UART_SendByte>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <SW_L3_Function+0xaa>
 bf6:	82 e0       	ldi	r24, 0x02	; 2
 bf8:	a2 de       	rcall	.-700    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 bfa:	c1 cf       	rjmp	.-126    	; 0xb7e <SW_L3_Function+0x2c>
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
	
	current_level=3;
	UART_SendByte(3, UART2);
}
 bfc:	cf 91       	pop	r28
 bfe:	08 95       	ret

00000c00 <SW_L4_Function>:
void SW_L4_Function(void)
{	
 c00:	cf 93       	push	r28
	u8 counter = current_level;
 c02:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>
	u8 upward_flag = 0;
	if (current_level<4)
 c06:	c4 30       	cpi	r28, 0x04	; 4
 c08:	40 f4       	brcc	.+16     	; 0xc1a <SW_L4_Function+0x1a>
	{	
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
 c0a:	61 e0       	ldi	r22, 0x01	; 1
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	5f de       	rcall	.-834    	; 0x8ce <HLED_Void_LEDState>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{	
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 c10:	82 e0       	ldi	r24, 0x02	; 2
 c12:	95 de       	rcall	.-726    	; 0x93e <HDCMOTOR_Void_MotorDirection>
		while (counter<=4)
 c14:	c5 30       	cpi	r28, 0x05	; 5
 c16:	50 f0       	brcs	.+20     	; 0xc2c <SW_L4_Function+0x2c>
 c18:	2e c0       	rjmp	.+92     	; 0xc76 <SW_L4_Function+0x76>
	u8 upward_flag = 0;
	if (current_level<4)
	{	
		HLED_Void_LEDState(ELV_UPLED, LED_ON);
	}
	else if (current_level>4)
 c1a:	c5 30       	cpi	r28, 0x05	; 5
 c1c:	08 f4       	brcc	.+2      	; 0xc20 <SW_L4_Function+0x20>
 c1e:	42 c0       	rjmp	.+132    	; 0xca4 <SW_L4_Function+0xa4>
	{
		upward_flag = 1;
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 c20:	61 e0       	ldi	r22, 0x01	; 1
 c22:	81 e0       	ldi	r24, 0x01	; 1
			
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 c24:	54 de       	rcall	.-856    	; 0x8ce <HLED_Void_LEDState>
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	8a de       	rcall	.-748    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 c2a:	13 c0       	rjmp	.+38     	; 0xc52 <SW_L4_Function+0x52>
 c2c:	2f ef       	ldi	r18, 0xFF	; 255
 c2e:	8e e9       	ldi	r24, 0x9E	; 158
 c30:	94 e2       	ldi	r25, 0x24	; 36
 c32:	21 50       	subi	r18, 0x01	; 1
 c34:	80 40       	sbci	r24, 0x00	; 0
 c36:	90 40       	sbci	r25, 0x00	; 0
 c38:	e1 f7       	brne	.-8      	; 0xc32 <SW_L4_Function+0x32>
 c3a:	00 c0       	rjmp	.+0      	; 0xc3c <SW_L4_Function+0x3c>
 c3c:	00 00       	nop
	{	
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=4)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 c3e:	ec 2f       	mov	r30, r28
 c40:	f0 e0       	ldi	r31, 0x00	; 0
 c42:	e0 50       	subi	r30, 0x00	; 0
 c44:	fe 4f       	sbci	r31, 0xFE	; 254
 c46:	80 81       	ld	r24, Z
 c48:	65 de       	rcall	.-822    	; 0x914 <H7SEG_Void_7SEGState>
			counter++;
 c4a:	cf 5f       	subi	r28, 0xFF	; 255
	}
	
	if(upward_flag == 0)
	{	
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
		while (counter<=4)
 c4c:	c5 30       	cpi	r28, 0x05	; 5
 c4e:	71 f7       	brne	.-36     	; 0xc2c <SW_L4_Function+0x2c>
 c50:	12 c0       	rjmp	.+36     	; 0xc76 <SW_L4_Function+0x76>
 c52:	2f ef       	ldi	r18, 0xFF	; 255
 c54:	8e e9       	ldi	r24, 0x9E	; 158
 c56:	94 e2       	ldi	r25, 0x24	; 36
 c58:	21 50       	subi	r18, 0x01	; 1
 c5a:	80 40       	sbci	r24, 0x00	; 0
 c5c:	90 40       	sbci	r25, 0x00	; 0
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <SW_L4_Function+0x58>
 c60:	00 c0       	rjmp	.+0      	; 0xc62 <SW_L4_Function+0x62>
 c62:	00 00       	nop
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=4)
		{
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 c64:	ec 2f       	mov	r30, r28
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	e0 50       	subi	r30, 0x00	; 0
 c6a:	fe 4f       	sbci	r31, 0xFE	; 254
 c6c:	80 81       	ld	r24, Z
 c6e:	52 de       	rcall	.-860    	; 0x914 <H7SEG_Void_7SEGState>
			counter--;
 c70:	c1 50       	subi	r28, 0x01	; 1
		}
	}
	else
	{
		HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
		while (counter>=4)
 c72:	c3 30       	cpi	r28, 0x03	; 3
 c74:	71 f7       	brne	.-36     	; 0xc52 <SW_L4_Function+0x52>
 c76:	2f ef       	ldi	r18, 0xFF	; 255
 c78:	8e e9       	ldi	r24, 0x9E	; 158
 c7a:	94 e2       	ldi	r25, 0x24	; 36
 c7c:	21 50       	subi	r18, 0x01	; 1
 c7e:	80 40       	sbci	r24, 0x00	; 0
 c80:	90 40       	sbci	r25, 0x00	; 0
 c82:	e1 f7       	brne	.-8      	; 0xc7c <SW_L4_Function+0x7c>
			counter--;
			
		}
	}
	_delay_ms(1500);
	HDCMOTOR_Void_MotorDirection(STOP);
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <SW_L4_Function+0x86>
 c86:	00 00       	nop
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	59 de       	rcall	.-846    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 c8c:	60 e0       	ldi	r22, 0x00	; 0
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	1e de       	rcall	.-964    	; 0x8ce <HLED_Void_LEDState>
 c92:	60 e0       	ldi	r22, 0x00	; 0
	
	current_level=4;	
 c94:	81 e0       	ldi	r24, 0x01	; 1
 c96:	1b de       	rcall	.-970    	; 0x8ce <HLED_Void_LEDState>
 c98:	84 e0       	ldi	r24, 0x04	; 4
	UART_SendByte(4, UART2);
 c9a:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <current_level>
 c9e:	62 e0       	ldi	r22, 0x02	; 2
}
 ca0:	96 dd       	rcall	.-1236   	; 0x7ce <UART_SendByte>
		HLED_Void_LEDState(ELV_DWNLED, LED_ON);
	}
	
	if(upward_flag == 0)
	{	
		HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <SW_L4_Function+0xaa>
 ca4:	82 e0       	ldi	r24, 0x02	; 2
 ca6:	4b de       	rcall	.-874    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 ca8:	c1 cf       	rjmp	.-126    	; 0xc2c <SW_L4_Function+0x2c>
	HLED_Void_LEDState(ELV_UPLED, LED_OFF);
	HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
	
	current_level=4;	
	UART_SendByte(4, UART2);
}
 caa:	cf 91       	pop	r28
 cac:	08 95       	ret

00000cae <UART0_FUNCTION>:

void UART0_FUNCTION(void)
{
 cae:	cf 93       	push	r28
		c= UART_ReceiveByte(UART0);
 cb0:	80 e0       	ldi	r24, 0x00	; 0
 cb2:	ab dd       	rcall	.-1194   	; 0x80a <UART_ReceiveByte>
 cb4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <c>
		u8 counter = current_level;
 cb8:	c0 91 2d 02 	lds	r28, 0x022D	; 0x80022d <current_level>
		u8 upward_flag = 0;
		if (current_level<c)
 cbc:	c8 17       	cp	r28, r24
 cbe:	50 f4       	brcc	.+20     	; 0xcd4 <UART0_FUNCTION+0x26>
		{
			HLED_Void_LEDState(ELV_UPLED, LED_ON);
 cc0:	61 e0       	ldi	r22, 0x01	; 1
 cc2:	80 e0       	ldi	r24, 0x00	; 0
 cc4:	04 de       	rcall	.-1016   	; 0x8ce <HLED_Void_LEDState>
		}
		else
			upward_flag = 2;
		if(upward_flag == 0)
		{
			HDCMOTOR_Void_MotorDirection(CLOCKWISE);
 cc6:	82 e0       	ldi	r24, 0x02	; 2
 cc8:	3a de       	rcall	.-908    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 cca:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <c>
			while (counter<c)
 cce:	c8 17       	cp	r28, r24
 cd0:	70 f0       	brcs	.+28     	; 0xcee <UART0_FUNCTION+0x40>
 cd2:	21 c0       	rjmp	.+66     	; 0xd16 <UART0_FUNCTION+0x68>
 cd4:	8c 17       	cp	r24, r28
		u8 upward_flag = 0;
		if (current_level<c)
		{
			HLED_Void_LEDState(ELV_UPLED, LED_ON);
		}
		else if (current_level>c)
 cd6:	08 f0       	brcs	.+2      	; 0xcda <UART0_FUNCTION+0x2c>
 cd8:	a0 c0       	rjmp	.+320    	; 0xe1a <UART0_FUNCTION+0x16c>
		{
			upward_flag = 1;
			HLED_Void_LEDState(ELV_DWNLED, LED_ON);
 cda:	61 e0       	ldi	r22, 0x01	; 1
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	f7 dd       	rcall	.-1042   	; 0x8ce <HLED_Void_LEDState>
			H7SEG_Void_7SEGState(SevenSEG_VALUE[c]);
			_delay_ms(1500);
		}
		else if (upward_flag == 1)
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 ce0:	81 e0       	ldi	r24, 0x01	; 1
 ce2:	2d de       	rcall	.-934    	; 0x93e <HDCMOTOR_Void_MotorDirection>
 ce4:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <c>
			while (counter>c)
 ce8:	8c 17       	cp	r24, r28
 cea:	78 f1       	brcs	.+94     	; 0xd4a <UART0_FUNCTION+0x9c>
 cec:	42 c0       	rjmp	.+132    	; 0xd72 <UART0_FUNCTION+0xc4>
 cee:	2f ef       	ldi	r18, 0xFF	; 255
 cf0:	8e e9       	ldi	r24, 0x9E	; 158
 cf2:	94 e2       	ldi	r25, 0x24	; 36
 cf4:	21 50       	subi	r18, 0x01	; 1
 cf6:	80 40       	sbci	r24, 0x00	; 0
 cf8:	90 40       	sbci	r25, 0x00	; 0
 cfa:	e1 f7       	brne	.-8      	; 0xcf4 <UART0_FUNCTION+0x46>
 cfc:	00 c0       	rjmp	.+0      	; 0xcfe <UART0_FUNCTION+0x50>
 cfe:	00 00       	nop
 d00:	ec 2f       	mov	r30, r28
		{
			HDCMOTOR_Void_MotorDirection(CLOCKWISE);
			while (counter<c)
			{
				_delay_ms(1500);
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 d02:	f0 e0       	ldi	r31, 0x00	; 0
 d04:	e0 50       	subi	r30, 0x00	; 0
 d06:	fe 4f       	sbci	r31, 0xFE	; 254
 d08:	80 81       	ld	r24, Z
 d0a:	04 de       	rcall	.-1016   	; 0x914 <H7SEG_Void_7SEGState>
 d0c:	cf 5f       	subi	r28, 0xFF	; 255
				counter++;
 d0e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <c>
		else
			upward_flag = 2;
		if(upward_flag == 0)
		{
			HDCMOTOR_Void_MotorDirection(CLOCKWISE);
			while (counter<c)
 d12:	c8 17       	cp	r28, r24
 d14:	60 f3       	brcs	.-40     	; 0xcee <UART0_FUNCTION+0x40>
 d16:	2f ef       	ldi	r18, 0xFF	; 255
 d18:	8e e9       	ldi	r24, 0x9E	; 158
 d1a:	94 e2       	ldi	r25, 0x24	; 36
 d1c:	21 50       	subi	r18, 0x01	; 1
 d1e:	80 40       	sbci	r24, 0x00	; 0
 d20:	90 40       	sbci	r25, 0x00	; 0
 d22:	e1 f7       	brne	.-8      	; 0xd1c <UART0_FUNCTION+0x6e>
 d24:	00 c0       	rjmp	.+0      	; 0xd26 <UART0_FUNCTION+0x78>
 d26:	00 00       	nop
 d28:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <c>
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
				counter++;
				
			}
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[c]);
 d2c:	f0 e0       	ldi	r31, 0x00	; 0
 d2e:	e0 50       	subi	r30, 0x00	; 0
 d30:	fe 4f       	sbci	r31, 0xFE	; 254
 d32:	80 81       	ld	r24, Z
 d34:	ef dd       	rcall	.-1058   	; 0x914 <H7SEG_Void_7SEGState>
 d36:	2f ef       	ldi	r18, 0xFF	; 255
 d38:	8e e9       	ldi	r24, 0x9E	; 158
 d3a:	94 e2       	ldi	r25, 0x24	; 36
 d3c:	21 50       	subi	r18, 0x01	; 1
 d3e:	80 40       	sbci	r24, 0x00	; 0
 d40:	90 40       	sbci	r25, 0x00	; 0
 d42:	e1 f7       	brne	.-8      	; 0xd3c <UART0_FUNCTION+0x8e>
 d44:	00 c0       	rjmp	.+0      	; 0xd46 <UART0_FUNCTION+0x98>
 d46:	00 00       	nop
 d48:	53 c0       	rjmp	.+166    	; 0xdf0 <UART0_FUNCTION+0x142>
 d4a:	2f ef       	ldi	r18, 0xFF	; 255
 d4c:	8e e9       	ldi	r24, 0x9E	; 158
 d4e:	94 e2       	ldi	r25, 0x24	; 36
 d50:	21 50       	subi	r18, 0x01	; 1
 d52:	80 40       	sbci	r24, 0x00	; 0
 d54:	90 40       	sbci	r25, 0x00	; 0
 d56:	e1 f7       	brne	.-8      	; 0xd50 <UART0_FUNCTION+0xa2>
 d58:	00 c0       	rjmp	.+0      	; 0xd5a <UART0_FUNCTION+0xac>
 d5a:	00 00       	nop
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
			while (counter>c)
			{
				_delay_ms(1500);
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 d5c:	ec 2f       	mov	r30, r28
 d5e:	f0 e0       	ldi	r31, 0x00	; 0
 d60:	e0 50       	subi	r30, 0x00	; 0
 d62:	fe 4f       	sbci	r31, 0xFE	; 254
 d64:	80 81       	ld	r24, Z
 d66:	d6 dd       	rcall	.-1108   	; 0x914 <H7SEG_Void_7SEGState>
 d68:	c1 50       	subi	r28, 0x01	; 1
				counter--;
 d6a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <c>
			_delay_ms(1500);
		}
		else if (upward_flag == 1)
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
			while (counter>c)
 d6e:	8c 17       	cp	r24, r28
 d70:	60 f3       	brcs	.-40     	; 0xd4a <UART0_FUNCTION+0x9c>
 d72:	2f ef       	ldi	r18, 0xFF	; 255
 d74:	8e e9       	ldi	r24, 0x9E	; 158
 d76:	94 e2       	ldi	r25, 0x24	; 36
 d78:	21 50       	subi	r18, 0x01	; 1
 d7a:	80 40       	sbci	r24, 0x00	; 0
 d7c:	90 40       	sbci	r25, 0x00	; 0
 d7e:	e1 f7       	brne	.-8      	; 0xd78 <UART0_FUNCTION+0xca>
 d80:	00 c0       	rjmp	.+0      	; 0xd82 <UART0_FUNCTION+0xd4>
 d82:	00 00       	nop
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
				counter--;
				
			}
			_delay_ms(1500);
			H7SEG_Void_7SEGState(SevenSEG_VALUE[c]);
 d84:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <c>
 d88:	f0 e0       	ldi	r31, 0x00	; 0
 d8a:	e0 50       	subi	r30, 0x00	; 0
 d8c:	fe 4f       	sbci	r31, 0xFE	; 254
 d8e:	80 81       	ld	r24, Z
 d90:	c1 dd       	rcall	.-1150   	; 0x914 <H7SEG_Void_7SEGState>
 d92:	2f ef       	ldi	r18, 0xFF	; 255
 d94:	8e e9       	ldi	r24, 0x9E	; 158
 d96:	94 e2       	ldi	r25, 0x24	; 36
 d98:	21 50       	subi	r18, 0x01	; 1
 d9a:	80 40       	sbci	r24, 0x00	; 0
 d9c:	90 40       	sbci	r25, 0x00	; 0
 d9e:	e1 f7       	brne	.-8      	; 0xd98 <UART0_FUNCTION+0xea>
 da0:	00 c0       	rjmp	.+0      	; 0xda2 <UART0_FUNCTION+0xf4>
 da2:	00 00       	nop
 da4:	25 c0       	rjmp	.+74     	; 0xdf0 <UART0_FUNCTION+0x142>
 da6:	2f ef       	ldi	r18, 0xFF	; 255
 da8:	8e e9       	ldi	r24, 0x9E	; 158
 daa:	94 e2       	ldi	r25, 0x24	; 36
 dac:	21 50       	subi	r18, 0x01	; 1
 dae:	80 40       	sbci	r24, 0x00	; 0
 db0:	90 40       	sbci	r25, 0x00	; 0
 db2:	e1 f7       	brne	.-8      	; 0xdac <UART0_FUNCTION+0xfe>
 db4:	00 c0       	rjmp	.+0      	; 0xdb6 <UART0_FUNCTION+0x108>
 db6:	00 00       	nop
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
			while (counter>0)
			{
				_delay_ms(1500);
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
 db8:	ec 2f       	mov	r30, r28
 dba:	f0 e0       	ldi	r31, 0x00	; 0
 dbc:	e0 50       	subi	r30, 0x00	; 0
 dbe:	fe 4f       	sbci	r31, 0xFE	; 254
 dc0:	80 81       	ld	r24, Z
 dc2:	a8 dd       	rcall	.-1200   	; 0x914 <H7SEG_Void_7SEGState>
 dc4:	c1 50       	subi	r28, 0x01	; 1
				counter--;
 dc6:	79 f7       	brne	.-34     	; 0xda6 <UART0_FUNCTION+0xf8>
			_delay_ms(1500);
		}
		else 
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
			while (counter>0)
 dc8:	2f ef       	ldi	r18, 0xFF	; 255
 dca:	8e e9       	ldi	r24, 0x9E	; 158
 dcc:	94 e2       	ldi	r25, 0x24	; 36
 dce:	21 50       	subi	r18, 0x01	; 1
 dd0:	80 40       	sbci	r24, 0x00	; 0
 dd2:	90 40       	sbci	r25, 0x00	; 0
 dd4:	e1 f7       	brne	.-8      	; 0xdce <UART0_FUNCTION+0x120>
 dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <UART0_FUNCTION+0x12a>
 dd8:	00 00       	nop
				H7SEG_Void_7SEGState(SevenSEG_VALUE[counter]);
				counter--;
						
			}
			_delay_ms(1500);
			H7SEG_Void_7SEGState(ZERO);
 dda:	8f e3       	ldi	r24, 0x3F	; 63
 ddc:	9b dd       	rcall	.-1226   	; 0x914 <H7SEG_Void_7SEGState>
 dde:	2f ef       	ldi	r18, 0xFF	; 255
 de0:	8e e9       	ldi	r24, 0x9E	; 158
 de2:	94 e2       	ldi	r25, 0x24	; 36
 de4:	21 50       	subi	r18, 0x01	; 1
 de6:	80 40       	sbci	r24, 0x00	; 0
 de8:	90 40       	sbci	r25, 0x00	; 0
 dea:	e1 f7       	brne	.-8      	; 0xde4 <UART0_FUNCTION+0x136>
			_delay_ms(1500);
		}
		
		HDCMOTOR_Void_MotorDirection(STOP);
 dec:	00 c0       	rjmp	.+0      	; 0xdee <UART0_FUNCTION+0x140>
 dee:	00 00       	nop
 df0:	80 e0       	ldi	r24, 0x00	; 0
		HLED_Void_LEDState(ELV_UPLED, LED_OFF);
 df2:	a5 dd       	rcall	.-1206   	; 0x93e <HDCMOTOR_Void_MotorDirection>
 df4:	60 e0       	ldi	r22, 0x00	; 0
 df6:	80 e0       	ldi	r24, 0x00	; 0
		HLED_Void_LEDState(ELV_DWNLED, LED_OFF);
 df8:	6a dd       	rcall	.-1324   	; 0x8ce <HLED_Void_LEDState>
 dfa:	60 e0       	ldi	r22, 0x00	; 0
 dfc:	81 e0       	ldi	r24, 0x01	; 1
		
		current_level=c;	
 dfe:	67 dd       	rcall	.-1330   	; 0x8ce <HLED_Void_LEDState>
 e00:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <c>
		if (current_level!=0)
 e04:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <current_level>
			UART_SendByte(c, UART2);
 e08:	88 23       	and	r24, r24
 e0a:	19 f0       	breq	.+6      	; 0xe12 <UART0_FUNCTION+0x164>
 e0c:	62 e0       	ldi	r22, 0x02	; 2
 e0e:	df dc       	rcall	.-1602   	; 0x7ce <UART_SendByte>
		else
			UART_SendByte(5, UART2);
 e10:	09 c0       	rjmp	.+18     	; 0xe24 <UART0_FUNCTION+0x176>
 e12:	62 e0       	ldi	r22, 0x02	; 2
 e14:	85 e0       	ldi	r24, 0x05	; 5
 e16:	db dc       	rcall	.-1610   	; 0x7ce <UART_SendByte>
 e18:	05 c0       	rjmp	.+10     	; 0xe24 <UART0_FUNCTION+0x176>
			H7SEG_Void_7SEGState(SevenSEG_VALUE[c]);
			_delay_ms(1500);
		}
		else 
		{
			HDCMOTOR_Void_MotorDirection(ANTI_CLOCKWISE);
 e1a:	81 e0       	ldi	r24, 0x01	; 1
 e1c:	90 dd       	rcall	.-1248   	; 0x93e <HDCMOTOR_Void_MotorDirection>
 e1e:	c1 11       	cpse	r28, r1
			while (counter>0)
 e20:	c2 cf       	rjmp	.-124    	; 0xda6 <UART0_FUNCTION+0xf8>
 e22:	d2 cf       	rjmp	.-92     	; 0xdc8 <UART0_FUNCTION+0x11a>
 e24:	cf 91       	pop	r28
		current_level=c;	
		if (current_level!=0)
			UART_SendByte(c, UART2);
		else
			UART_SendByte(5, UART2);
 e26:	08 95       	ret

00000e28 <main>:
 e28:	80 e0       	ldi	r24, 0x00	; 0


int main(void)
{
    /* Replace with your application code */
	HLED_Void_AttachLED(ELV_UPLED);
 e2a:	45 dd       	rcall	.-1398   	; 0x8b6 <HLED_Void_AttachLED>
	HLED_Void_AttachLED(ELV_DWNLED);
 e2c:	81 e0       	ldi	r24, 0x01	; 1
	H7SEG_Void_Setup7SEG();
 e2e:	43 dd       	rcall	.-1402   	; 0x8b6 <HLED_Void_AttachLED>
 e30:	6d dd       	rcall	.-1318   	; 0x90c <H7SEG_Void_Setup7SEG>
	H7SEG_Void_7SEGState(SevenSEG_VALUE[current_level]);
 e32:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <current_level>
 e36:	f0 e0       	ldi	r31, 0x00	; 0
 e38:	e0 50       	subi	r30, 0x00	; 0
 e3a:	fe 4f       	sbci	r31, 0xFE	; 254
 e3c:	80 81       	ld	r24, Z
 e3e:	6a dd       	rcall	.-1324   	; 0x914 <H7SEG_Void_7SEGState>
	HSwitch_Void_AttachSwitch(SW_EMERGENCY, SW_EMERGENCY_Function);
 e40:	6e eb       	ldi	r22, 0xBE	; 190
 e42:	74 e0       	ldi	r23, 0x04	; 4
 e44:	80 e0       	ldi	r24, 0x00	; 0
 e46:	48 dd       	rcall	.-1392   	; 0x8d8 <HSwitch_Void_AttachSwitch>
	HSwitch_Void_AttachSwitch(SW_GND, SW_GND_Function);
 e48:	62 ec       	ldi	r22, 0xC2	; 194
 e4a:	74 e0       	ldi	r23, 0x04	; 4
 e4c:	81 e0       	ldi	r24, 0x01	; 1
 e4e:	44 dd       	rcall	.-1400   	; 0x8d8 <HSwitch_Void_AttachSwitch>
	HSwitch_Void_AttachSwitch(SW_L1, SW_L1_Function);
 e50:	60 e0       	ldi	r22, 0x00	; 0
 e52:	75 e0       	ldi	r23, 0x05	; 5
 e54:	82 e0       	ldi	r24, 0x02	; 2
 e56:	40 dd       	rcall	.-1408   	; 0x8d8 <HSwitch_Void_AttachSwitch>
	HSwitch_Void_AttachSwitch(SW_L2, SW_L2_Function);
 e58:	62 e5       	ldi	r22, 0x52	; 82
 e5a:	75 e0       	ldi	r23, 0x05	; 5
 e5c:	83 e0       	ldi	r24, 0x03	; 3
 e5e:	3c dd       	rcall	.-1416   	; 0x8d8 <HSwitch_Void_AttachSwitch>
	HSwitch_Void_AttachSwitch(SW_L3, SW_L3_Function);
 e60:	69 ea       	ldi	r22, 0xA9	; 169
 e62:	75 e0       	ldi	r23, 0x05	; 5
 e64:	84 e0       	ldi	r24, 0x04	; 4
 e66:	38 dd       	rcall	.-1424   	; 0x8d8 <HSwitch_Void_AttachSwitch>
	HSwitch_Void_AttachSwitch(SW_L4, SW_L4_Function);
 e68:	60 e0       	ldi	r22, 0x00	; 0
 e6a:	76 e0       	ldi	r23, 0x06	; 6
 e6c:	85 e0       	ldi	r24, 0x05	; 5
	HDCMOTOR_Void_SetupMotorDriver();
 e6e:	34 dd       	rcall	.-1432   	; 0x8d8 <HSwitch_Void_AttachSwitch>
 e70:	55 dd       	rcall	.-1366   	; 0x91c <HDCMOTOR_Void_SetupMotorDriver>
	MUART_voidSetCallback(UART0, UART0_FUNCTION);
 e72:	67 e5       	ldi	r22, 0x57	; 87
 e74:	76 e0       	ldi	r23, 0x06	; 6
 e76:	80 e0       	ldi	r24, 0x00	; 0
 e78:	e8 dc       	rcall	.-1584   	; 0x84a <MUART_voidSetCallback>
 e7a:	80 e0       	ldi	r24, 0x00	; 0
	UART_Init(UART0);
 e7c:	6c dc       	rcall	.-1832   	; 0x756 <UART_Init>
 e7e:	82 e0       	ldi	r24, 0x02	; 2
 e80:	6a dc       	rcall	.-1836   	; 0x756 <UART_Init>
	UART_Init(UART2);
 e82:	ff cf       	rjmp	.-2      	; 0xe82 <main+0x5a>

00000e84 <__tablejump2__>:
 e84:	ee 0f       	add	r30, r30
 e86:	ff 1f       	adc	r31, r31
 e88:	88 1f       	adc	r24, r24
 e8a:	8b bf       	out	0x3b, r24	; 59
 e8c:	07 90       	elpm	r0, Z+
 e8e:	f6 91       	elpm	r31, Z
 e90:	e0 2d       	mov	r30, r0
 e92:	19 94       	eijmp

00000e94 <_exit>:
 e94:	f8 94       	cli

00000e96 <__stop_program>:
 e96:	ff cf       	rjmp	.-2      	; 0xe96 <__stop_program>
