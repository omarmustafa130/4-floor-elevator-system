
Administration_system_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  00000956  000009ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000956  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080025a  0080025a  00000a44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002304  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001115  00000000  00000000  00002f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f5  00000000  00000000  00004075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b4  00000000  00000000  0000516c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4e  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001831  00000000  00000000  0000656e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7c c0       	rjmp	.+248    	; 0xfa <__ctors_end>
   2:	00 00       	nop
   4:	10 c1       	rjmp	.+544    	; 0x226 <__vector_1>
   6:	00 00       	nop
   8:	3b c1       	rjmp	.+630    	; 0x280 <__vector_2>
   a:	00 00       	nop
   c:	66 c1       	rjmp	.+716    	; 0x2da <__vector_3>
   e:	00 00       	nop
  10:	91 c1       	rjmp	.+802    	; 0x334 <__vector_4>
  12:	00 00       	nop
  14:	bc c1       	rjmp	.+888    	; 0x38e <__vector_5>
  16:	00 00       	nop
  18:	e7 c1       	rjmp	.+974    	; 0x3e8 <__vector_6>
  1a:	00 00       	nop
  1c:	12 c2       	rjmp	.+1060   	; 0x442 <__vector_7>
  1e:	00 00       	nop
  20:	3d c2       	rjmp	.+1146   	; 0x49c <__vector_8>
  22:	00 00       	nop
  24:	68 c2       	rjmp	.+1232   	; 0x4f6 <__vector_9>
  26:	00 00       	nop
  28:	91 c2       	rjmp	.+1314   	; 0x54c <__vector_10>
  2a:	00 00       	nop
  2c:	ba c2       	rjmp	.+1396   	; 0x5a2 <__vector_11>
  2e:	00 00       	nop
  30:	83 c0       	rjmp	.+262    	; 0x138 <__bad_interrupt>
  32:	00 00       	nop
  34:	81 c0       	rjmp	.+258    	; 0x138 <__bad_interrupt>
  36:	00 00       	nop
  38:	7f c0       	rjmp	.+254    	; 0x138 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7d c0       	rjmp	.+250    	; 0x138 <__bad_interrupt>
  3e:	00 00       	nop
  40:	7b c0       	rjmp	.+246    	; 0x138 <__bad_interrupt>
  42:	00 00       	nop
  44:	79 c0       	rjmp	.+242    	; 0x138 <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c0       	rjmp	.+238    	; 0x138 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	75 c0       	rjmp	.+234    	; 0x138 <__bad_interrupt>
  4e:	00 00       	nop
  50:	73 c0       	rjmp	.+230    	; 0x138 <__bad_interrupt>
  52:	00 00       	nop
  54:	71 c0       	rjmp	.+226    	; 0x138 <__bad_interrupt>
  56:	00 00       	nop
  58:	6f c0       	rjmp	.+222    	; 0x138 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6d c0       	rjmp	.+218    	; 0x138 <__bad_interrupt>
  5e:	00 00       	nop
  60:	6b c0       	rjmp	.+214    	; 0x138 <__bad_interrupt>
  62:	00 00       	nop
  64:	69 c0       	rjmp	.+210    	; 0x138 <__bad_interrupt>
  66:	00 00       	nop
  68:	67 c0       	rjmp	.+206    	; 0x138 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	65 c0       	rjmp	.+202    	; 0x138 <__bad_interrupt>
  6e:	00 00       	nop
  70:	63 c0       	rjmp	.+198    	; 0x138 <__bad_interrupt>
  72:	00 00       	nop
  74:	61 c0       	rjmp	.+194    	; 0x138 <__bad_interrupt>
  76:	00 00       	nop
  78:	5f c0       	rjmp	.+190    	; 0x138 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5d c0       	rjmp	.+186    	; 0x138 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5b c0       	rjmp	.+182    	; 0x138 <__bad_interrupt>
  82:	00 00       	nop
  84:	59 c0       	rjmp	.+178    	; 0x138 <__bad_interrupt>
  86:	00 00       	nop
  88:	57 c0       	rjmp	.+174    	; 0x138 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	55 c0       	rjmp	.+170    	; 0x138 <__bad_interrupt>
  8e:	00 00       	nop
  90:	53 c0       	rjmp	.+166    	; 0x138 <__bad_interrupt>
  92:	00 00       	nop
  94:	51 c0       	rjmp	.+162    	; 0x138 <__bad_interrupt>
  96:	00 00       	nop
  98:	4f c0       	rjmp	.+158    	; 0x138 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4d c0       	rjmp	.+154    	; 0x138 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	4b c0       	rjmp	.+150    	; 0x138 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	49 c0       	rjmp	.+146    	; 0x138 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	47 c0       	rjmp	.+142    	; 0x138 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	45 c0       	rjmp	.+138    	; 0x138 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	43 c0       	rjmp	.+134    	; 0x138 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	41 c0       	rjmp	.+130    	; 0x138 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3f c0       	rjmp	.+126    	; 0x138 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3d c0       	rjmp	.+122    	; 0x138 <__bad_interrupt>
  be:	00 00       	nop
  c0:	3b c0       	rjmp	.+118    	; 0x138 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	39 c0       	rjmp	.+114    	; 0x138 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	37 c0       	rjmp	.+110    	; 0x138 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	f1 c2       	rjmp	.+1506   	; 0x6b0 <__vector_51>
  ce:	00 00       	nop
  d0:	33 c0       	rjmp	.+102    	; 0x138 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	31 c0       	rjmp	.+98     	; 0x138 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2f c0       	rjmp	.+94     	; 0x138 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2d c0       	rjmp	.+90     	; 0x138 <__bad_interrupt>
  de:	00 00       	nop
  e0:	2b c0       	rjmp	.+86     	; 0x138 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	c8 00       	.word	0x00c8	; ????
  e6:	a7 00       	.word	0x00a7	; ????
  e8:	aa 00       	.word	0x00aa	; ????
  ea:	ad 00       	.word	0x00ad	; ????
  ec:	b0 00       	.word	0x00b0	; ????
  ee:	b3 00       	.word	0x00b3	; ????
  f0:	b6 00       	.word	0x00b6	; ????
  f2:	b9 00       	.word	0x00b9	; ????
  f4:	bc 00       	.word	0x00bc	; ????
  f6:	bf 00       	.word	0x00bf	; ????
  f8:	c2 00       	.word	0x00c2	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	d1 e2       	ldi	r29, 0x21	; 33
 102:	de bf       	out	0x3e, r29	; 62
 104:	cd bf       	out	0x3d, r28	; 61
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	0c bf       	out	0x3c, r16	; 60

0000010a <__do_copy_data>:
 10a:	12 e0       	ldi	r17, 0x02	; 2
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b2 e0       	ldi	r27, 0x02	; 2
 110:	e6 e5       	ldi	r30, 0x56	; 86
 112:	f9 e0       	ldi	r31, 0x09	; 9
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	0b bf       	out	0x3b, r16	; 59
 118:	02 c0       	rjmp	.+4      	; 0x11e <__do_copy_data+0x14>
 11a:	07 90       	elpm	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	aa 35       	cpi	r26, 0x5A	; 90
 120:	b1 07       	cpc	r27, r17
 122:	d9 f7       	brne	.-10     	; 0x11a <__do_copy_data+0x10>

00000124 <__do_clear_bss>:
 124:	22 e0       	ldi	r18, 0x02	; 2
 126:	aa e5       	ldi	r26, 0x5A	; 90
 128:	b2 e0       	ldi	r27, 0x02	; 2
 12a:	01 c0       	rjmp	.+2      	; 0x12e <.do_clear_bss_start>

0000012c <.do_clear_bss_loop>:
 12c:	1d 92       	st	X+, r1

0000012e <.do_clear_bss_start>:
 12e:	a0 38       	cpi	r26, 0x80	; 128
 130:	b2 07       	cpc	r27, r18
 132:	e1 f7       	brne	.-8      	; 0x12c <.do_clear_bss_loop>
 134:	af d3       	rcall	.+1886   	; 0x894 <main>
 136:	0d c4       	rjmp	.+2074   	; 0x952 <_exit>

00000138 <__bad_interrupt>:
 138:	63 cf       	rjmp	.-314    	; 0x0 <__vectors>

0000013a <PGPIO_PORT_tPtrGetRegister>:
			CLR_BIT(P->DDR, Copy_u8PinNo);
			SET_BIT(P->PORT, Copy_u8PinNo);
			break;
	}
	
}
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	8b 30       	cpi	r24, 0x0B	; 11
 13e:	91 05       	cpc	r25, r1
 140:	20 f5       	brcc	.+72     	; 0x18a <PGPIO_PORT_tPtrGetRegister+0x50>
 142:	fc 01       	movw	r30, r24
 144:	88 27       	eor	r24, r24
 146:	ee 58       	subi	r30, 0x8E	; 142
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	8f 4f       	sbci	r24, 0xFF	; 255
 14c:	fa c3       	rjmp	.+2036   	; 0x942 <__tablejump2__>
 14e:	83 e2       	ldi	r24, 0x23	; 35
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
 154:	86 e2       	ldi	r24, 0x26	; 38
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
 15a:	89 e2       	ldi	r24, 0x29	; 41
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
 160:	8c e2       	ldi	r24, 0x2C	; 44
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
 166:	8f e2       	ldi	r24, 0x2F	; 47
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	08 95       	ret
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	08 95       	ret
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	08 95       	ret
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	08 95       	ret
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 95       	ret
 190:	80 e2       	ldi	r24, 0x20	; 32
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	08 95       	ret

00000196 <MGPIO_VoidSetPortDirection>:
 196:	cf 93       	push	r28
 198:	c6 2f       	mov	r28, r22
 19a:	cf df       	rcall	.-98     	; 0x13a <PGPIO_PORT_tPtrGetRegister>
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	89 f0       	breq	.+34     	; 0x1c2 <MGPIO_VoidSetPortDirection+0x2c>
 1a0:	c1 30       	cpi	r28, 0x01	; 1
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <MGPIO_VoidSetPortDirection+0x1c>
 1a4:	18 f0       	brcs	.+6      	; 0x1ac <MGPIO_VoidSetPortDirection+0x16>
 1a6:	c2 30       	cpi	r28, 0x02	; 2
 1a8:	41 f0       	breq	.+16     	; 0x1ba <MGPIO_VoidSetPortDirection+0x24>
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <MGPIO_VoidSetPortDirection+0x2c>
 1ac:	fc 01       	movw	r30, r24
 1ae:	11 82       	std	Z+1, r1	; 0x01
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <MGPIO_VoidSetPortDirection+0x2c>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	fc 01       	movw	r30, r24
 1b6:	21 83       	std	Z+1, r18	; 0x01
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <MGPIO_VoidSetPortDirection+0x2c>
 1ba:	fc 01       	movw	r30, r24
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	22 83       	std	Z+2, r18	; 0x02
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <MGPIO_VoidSetPortValue>:

void MGPIO_VoidSetPortValue(enum GPIO_PORT_ID_t GPIO_PORT_ID, u8 Copy_u8Value)
{
 1c6:	cf 93       	push	r28
 1c8:	c6 2f       	mov	r28, r22
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 1ca:	b7 df       	rcall	.-146    	; 0x13a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 1cc:	00 97       	sbiw	r24, 0x00	; 0
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <MGPIO_VoidSetPortValue+0xe>
		return;
	P->PORT = Copy_u8Value;
 1d0:	fc 01       	movw	r30, r24
 1d2:	c2 83       	std	Z+2, r28	; 0x02
}
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <MGPIO_VoidSetPinValue>:

void MGPIO_VoidSetPinValue(enum GPIO_PORT_ID_t GPIO_PORT_ID, u8 Copy_u8PinNo, enum GPIO_VALUE_t GPIO_VALUE)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	d6 2f       	mov	r29, r22
 1de:	c4 2f       	mov	r28, r20
	volatile PORT_t* P = 0;
	P = PGPIO_PORT_tPtrGetRegister(GPIO_PORT_ID);
 1e0:	ac df       	rcall	.-168    	; 0x13a <PGPIO_PORT_tPtrGetRegister>
	if (P == 0)
 1e2:	00 97       	sbiw	r24, 0x00	; 0
 1e4:	e9 f0       	breq	.+58     	; 0x220 <MGPIO_VoidSetPinValue+0x48>
		return;
	switch(GPIO_VALUE)
 1e6:	cc 23       	and	r28, r28
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <MGPIO_VoidSetPinValue+0x18>
 1ea:	c1 30       	cpi	r28, 0x01	; 1
 1ec:	71 f0       	breq	.+28     	; 0x20a <MGPIO_VoidSetPinValue+0x32>
 1ee:	18 c0       	rjmp	.+48     	; 0x220 <MGPIO_VoidSetPinValue+0x48>
	{
		case GPIO_LOW:
			CLR_BIT(P->PORT, Copy_u8PinNo);
 1f0:	fc 01       	movw	r30, r24
 1f2:	42 81       	ldd	r20, Z+2	; 0x02
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <MGPIO_VoidSetPinValue+0x26>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	da 95       	dec	r29
 200:	e2 f7       	brpl	.-8      	; 0x1fa <MGPIO_VoidSetPinValue+0x22>
 202:	20 95       	com	r18
 204:	24 23       	and	r18, r20
 206:	22 83       	std	Z+2, r18	; 0x02
			break;
 208:	0b c0       	rjmp	.+22     	; 0x220 <MGPIO_VoidSetPinValue+0x48>
		case GPIO_HIGH:
			SET_BIT(P->PORT, Copy_u8PinNo);
 20a:	fc 01       	movw	r30, r24
 20c:	42 81       	ldd	r20, Z+2	; 0x02
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <MGPIO_VoidSetPinValue+0x40>
 214:	22 0f       	add	r18, r18
 216:	33 1f       	adc	r19, r19
 218:	da 95       	dec	r29
 21a:	e2 f7       	brpl	.-8      	; 0x214 <MGPIO_VoidSetPinValue+0x3c>
 21c:	24 2b       	or	r18, r20
 21e:	22 83       	std	Z+2, r18	; 0x02
			break;
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <__vector_1>:
	Global_CallbackPCINT[EXTI_PCINT]= Local_Callback;
}


void EXTI_VEC0()
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	0b b6       	in	r0, 0x3b	; 59
 232:	0f 92       	push	r0
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT0] != 0)
 24c:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <Global_Callback>
 250:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <Global_Callback+0x1>
 254:	30 97       	sbiw	r30, 0x00	; 0
 256:	09 f0       	breq	.+2      	; 0x25a <__vector_1+0x34>
		Global_Callback[EXTI_INT0]();
 258:	19 95       	eicall
	else
		return;
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0b be       	out	0x3b, r0	; 59
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__vector_2>:
void EXTI_VEC1()
{
 280:	1f 92       	push	r1
 282:	0f 92       	push	r0
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	0f 92       	push	r0
 288:	11 24       	eor	r1, r1
 28a:	0b b6       	in	r0, 0x3b	; 59
 28c:	0f 92       	push	r0
 28e:	2f 93       	push	r18
 290:	3f 93       	push	r19
 292:	4f 93       	push	r20
 294:	5f 93       	push	r21
 296:	6f 93       	push	r22
 298:	7f 93       	push	r23
 29a:	8f 93       	push	r24
 29c:	9f 93       	push	r25
 29e:	af 93       	push	r26
 2a0:	bf 93       	push	r27
 2a2:	ef 93       	push	r30
 2a4:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT1] != 0)
 2a6:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <Global_Callback+0x2>
 2aa:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <Global_Callback+0x3>
 2ae:	30 97       	sbiw	r30, 0x00	; 0
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <__vector_2+0x34>
		Global_Callback[EXTI_INT1]();
 2b2:	19 95       	eicall
	else
		return;
}
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0b be       	out	0x3b, r0	; 59
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_3>:

void EXTI_VEC2()
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0b b6       	in	r0, 0x3b	; 59
 2e6:	0f 92       	push	r0
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT2] != 0)
 300:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <Global_Callback+0x4>
 304:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <Global_Callback+0x5>
 308:	30 97       	sbiw	r30, 0x00	; 0
 30a:	09 f0       	breq	.+2      	; 0x30e <__vector_3+0x34>
		Global_Callback[EXTI_INT2]();
 30c:	19 95       	eicall
	else
		return;
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_4>:
void EXTI_VEC3()
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	0b b6       	in	r0, 0x3b	; 59
 340:	0f 92       	push	r0
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT3] != 0)
 35a:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <Global_Callback+0x6>
 35e:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <Global_Callback+0x7>
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_4+0x34>
		Global_Callback[EXTI_INT3]();
 366:	19 95       	eicall
	else
		return;
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0b be       	out	0x3b, r0	; 59
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__vector_5>:

void EXTI_VEC4()
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	0b b6       	in	r0, 0x3b	; 59
 39a:	0f 92       	push	r0
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT4] != 0)
 3b4:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <Global_Callback+0x8>
 3b8:	f0 91 69 02 	lds	r31, 0x0269	; 0x800269 <Global_Callback+0x9>
 3bc:	30 97       	sbiw	r30, 0x00	; 0
 3be:	09 f0       	breq	.+2      	; 0x3c2 <__vector_5+0x34>
		Global_Callback[EXTI_INT4]();
 3c0:	19 95       	eicall
	else
		return;
}
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0b be       	out	0x3b, r0	; 59
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_6>:
void EXTI_VEC5()
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	0b b6       	in	r0, 0x3b	; 59
 3f4:	0f 92       	push	r0
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT5] != 0)
 40e:	e0 91 6a 02 	lds	r30, 0x026A	; 0x80026a <Global_Callback+0xa>
 412:	f0 91 6b 02 	lds	r31, 0x026B	; 0x80026b <Global_Callback+0xb>
 416:	30 97       	sbiw	r30, 0x00	; 0
 418:	09 f0       	breq	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		Global_Callback[EXTI_INT5]();
 41a:	19 95       	eicall
	else
		return;
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0b be       	out	0x3b, r0	; 59
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_7>:

void EXTI_VEC6()
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	0f 92       	push	r0
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT6] != 0)
 468:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <Global_Callback+0xc>
 46c:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <Global_Callback+0xd>
 470:	30 97       	sbiw	r30, 0x00	; 0
 472:	09 f0       	breq	.+2      	; 0x476 <__vector_7+0x34>
		Global_Callback[EXTI_INT6]();
 474:	19 95       	eicall
	else
		return;
}
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0b be       	out	0x3b, r0	; 59
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <__vector_8>:
void EXTI_VEC7()
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	0b b6       	in	r0, 0x3b	; 59
 4a8:	0f 92       	push	r0
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	if (Global_Callback[EXTI_INT7] != 0)
 4c2:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <Global_Callback+0xe>
 4c6:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <Global_Callback+0xf>
 4ca:	30 97       	sbiw	r30, 0x00	; 0
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__vector_8+0x34>
		Global_Callback[EXTI_INT7]();
 4ce:	19 95       	eicall
	else
		return;
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	7f 91       	pop	r23
 4de:	6f 91       	pop	r22
 4e0:	5f 91       	pop	r21
 4e2:	4f 91       	pop	r20
 4e4:	3f 91       	pop	r19
 4e6:	2f 91       	pop	r18
 4e8:	0f 90       	pop	r0
 4ea:	0b be       	out	0x3b, r0	; 59
 4ec:	0f 90       	pop	r0
 4ee:	0f be       	out	0x3f, r0	; 63
 4f0:	0f 90       	pop	r0
 4f2:	1f 90       	pop	r1
 4f4:	18 95       	reti

000004f6 <__vector_9>:


void EXTI_VEC_PCINT0()
{
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	0b b6       	in	r0, 0x3b	; 59
 502:	0f 92       	push	r0
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT0]();
 51c:	e0 91 5a 02 	lds	r30, 0x025A	; 0x80025a <__data_end>
 520:	f0 91 5b 02 	lds	r31, 0x025B	; 0x80025b <__data_end+0x1>
 524:	19 95       	eicall
}
 526:	ff 91       	pop	r31
 528:	ef 91       	pop	r30
 52a:	bf 91       	pop	r27
 52c:	af 91       	pop	r26
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	7f 91       	pop	r23
 534:	6f 91       	pop	r22
 536:	5f 91       	pop	r21
 538:	4f 91       	pop	r20
 53a:	3f 91       	pop	r19
 53c:	2f 91       	pop	r18
 53e:	0f 90       	pop	r0
 540:	0b be       	out	0x3b, r0	; 59
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_10>:
void EXTI_VEC_PCINT1()
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	0b b6       	in	r0, 0x3b	; 59
 558:	0f 92       	push	r0
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT1]();
 572:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end+0x2>
 576:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <__data_end+0x3>
 57a:	19 95       	eicall
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0b be       	out	0x3b, r0	; 59
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_11>:
void EXTI_VEC_PCINT2()
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	0b b6       	in	r0, 0x3b	; 59
 5ae:	0f 92       	push	r0
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	Global_CallbackPCINT[EXTI_PCINT2]();
 5c8:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <__data_end+0x4>
 5cc:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <__data_end+0x5>
 5d0:	19 95       	eicall
 5d2:	ff 91       	pop	r31
 5d4:	ef 91       	pop	r30
 5d6:	bf 91       	pop	r27
 5d8:	af 91       	pop	r26
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	7f 91       	pop	r23
 5e0:	6f 91       	pop	r22
 5e2:	5f 91       	pop	r21
 5e4:	4f 91       	pop	r20
 5e6:	3f 91       	pop	r19
 5e8:	2f 91       	pop	r18
 5ea:	0f 90       	pop	r0
 5ec:	0b be       	out	0x3b, r0	; 59
 5ee:	0f 90       	pop	r0
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	0f 90       	pop	r0
 5f4:	1f 90       	pop	r1
 5f6:	18 95       	reti

000005f8 <UART_Init>:
	return 0;
}

void MUART_voidSetCallback(enum UART_NUM uart_no,void (*Local_Callback)(void))
{
	UART_Global_Callback[uart_no]= Local_Callback;	
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	99 f0       	breq	.+38     	; 0x622 <UART_Init+0x2a>
 5fc:	28 f0       	brcs	.+10     	; 0x608 <UART_Init+0x10>
 5fe:	82 30       	cpi	r24, 0x02	; 2
 600:	e9 f0       	breq	.+58     	; 0x63c <UART_Init+0x44>
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	41 f1       	breq	.+80     	; 0x656 <UART_Init+0x5e>
 606:	08 95       	ret
 608:	e0 ec       	ldi	r30, 0xC0	; 192
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	15 82       	std	Z+5, r1	; 0x05
 60e:	87 e6       	ldi	r24, 0x67	; 103
 610:	84 83       	std	Z+4, r24	; 0x04
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	80 83       	st	Z, r24
 616:	82 81       	ldd	r24, Z+2	; 0x02
 618:	8d 7f       	andi	r24, 0xFD	; 253
 61a:	82 83       	std	Z+2, r24	; 0x02
 61c:	88 e9       	ldi	r24, 0x98	; 152
 61e:	81 83       	std	Z+1, r24	; 0x01
 620:	08 95       	ret
 622:	e8 ec       	ldi	r30, 0xC8	; 200
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	15 82       	std	Z+5, r1	; 0x05
 628:	87 e6       	ldi	r24, 0x67	; 103
 62a:	84 83       	std	Z+4, r24	; 0x04
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	80 83       	st	Z, r24
 630:	82 81       	ldd	r24, Z+2	; 0x02
 632:	8d 7f       	andi	r24, 0xFD	; 253
 634:	82 83       	std	Z+2, r24	; 0x02
 636:	88 e1       	ldi	r24, 0x18	; 24
 638:	81 83       	std	Z+1, r24	; 0x01
 63a:	08 95       	ret
 63c:	e0 ed       	ldi	r30, 0xD0	; 208
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	15 82       	std	Z+5, r1	; 0x05
 642:	87 e6       	ldi	r24, 0x67	; 103
 644:	84 83       	std	Z+4, r24	; 0x04
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	80 83       	st	Z, r24
 64a:	82 81       	ldd	r24, Z+2	; 0x02
 64c:	8d 7f       	andi	r24, 0xFD	; 253
 64e:	82 83       	std	Z+2, r24	; 0x02
 650:	88 e9       	ldi	r24, 0x98	; 152
 652:	81 83       	std	Z+1, r24	; 0x01
 654:	08 95       	ret
 656:	e0 e3       	ldi	r30, 0x30	; 48
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	15 82       	std	Z+5, r1	; 0x05
 65c:	87 e6       	ldi	r24, 0x67	; 103
 65e:	84 83       	std	Z+4, r24	; 0x04
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	80 83       	st	Z, r24
 664:	82 81       	ldd	r24, Z+2	; 0x02
 666:	8d 7f       	andi	r24, 0xFD	; 253
 668:	82 83       	std	Z+2, r24	; 0x02
 66a:	88 e1       	ldi	r24, 0x18	; 24
 66c:	81 83       	std	Z+1, r24	; 0x01
 66e:	08 95       	ret

00000670 <UART_ReceiveByte>:
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	49 f0       	breq	.+18     	; 0x686 <UART_ReceiveByte+0x16>
 674:	28 f0       	brcs	.+10     	; 0x680 <UART_ReceiveByte+0x10>
 676:	82 30       	cpi	r24, 0x02	; 2
 678:	71 f0       	breq	.+28     	; 0x696 <UART_ReceiveByte+0x26>
 67a:	83 30       	cpi	r24, 0x03	; 3
 67c:	79 f0       	breq	.+30     	; 0x69c <UART_ReceiveByte+0x2c>
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <UART_ReceiveByte+0x3c>
 680:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 684:	08 95       	ret
 686:	e8 ec       	ldi	r30, 0xC8	; 200
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	88 23       	and	r24, r24
 68e:	ec f7       	brge	.-6      	; 0x68a <UART_ReceiveByte+0x1a>
 690:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 694:	08 95       	ret
 696:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 69a:	08 95       	ret
 69c:	e0 e3       	ldi	r30, 0x30	; 48
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	80 81       	ld	r24, Z
 6a2:	88 23       	and	r24, r24
 6a4:	ec f7       	brge	.-6      	; 0x6a0 <UART_ReceiveByte+0x30>
 6a6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
 6aa:	08 95       	ret
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <__vector_51>:
}

void USART2_RX()
{
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	0b b6       	in	r0, 0x3b	; 59
 6bc:	0f 92       	push	r0
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
	if (UART_Global_Callback[UART2] != 0)
 6d6:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <UART_Global_Callback+0x4>
 6da:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <UART_Global_Callback+0x5>
 6de:	30 97       	sbiw	r30, 0x00	; 0
 6e0:	09 f0       	breq	.+2      	; 0x6e4 <__vector_51+0x34>
		UART_Global_Callback[UART2]();
 6e2:	19 95       	eicall
	else
		return;	
 6e4:	ff 91       	pop	r31
 6e6:	ef 91       	pop	r30
 6e8:	bf 91       	pop	r27
 6ea:	af 91       	pop	r26
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	7f 91       	pop	r23
 6f2:	6f 91       	pop	r22
 6f4:	5f 91       	pop	r21
 6f6:	4f 91       	pop	r20
 6f8:	3f 91       	pop	r19
 6fa:	2f 91       	pop	r18
 6fc:	0f 90       	pop	r0
 6fe:	0b be       	out	0x3b, r0	; 59
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <LCD_Vid_SendCommand>:
	LCD_Vid_SendCommand(DisplayClear);
	_delay_ms(2);
	LCD_Vid_SendCommand(EntryMode);
}
void LCD_Vid_SendCommand(u8 Copy_u8_Command)
{	MGPIO_VoidSetPinValue(PORTConrtol, RS, GPIO_LOW);
 70a:	cf 93       	push	r28
 70c:	c8 2f       	mov	r28, r24
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	60 e0       	ldi	r22, 0x00	; 0
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	61 dd       	rcall	.-1342   	; 0x1d8 <MGPIO_VoidSetPinValue>
	MGPIO_VoidSetPinValue(PORTConrtol, RW, GPIO_LOW);
 716:	40 e0       	ldi	r20, 0x00	; 0
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	5d dd       	rcall	.-1350   	; 0x1d8 <MGPIO_VoidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 71e:	8f ec       	ldi	r24, 0xCF	; 207
 720:	97 e0       	ldi	r25, 0x07	; 7
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <LCD_Vid_SendCommand+0x18>
 726:	00 c0       	rjmp	.+0      	; 0x728 <LCD_Vid_SendCommand+0x1e>
 728:	00 00       	nop
	_delay_ms(1);
	MGPIO_VoidSetPinValue(PORTConrtol, EN, GPIO_HIGH);
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	62 e0       	ldi	r22, 0x02	; 2
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	53 dd       	rcall	.-1370   	; 0x1d8 <MGPIO_VoidSetPinValue>
 732:	8f ec       	ldi	r24, 0xCF	; 207
 734:	97 e0       	ldi	r25, 0x07	; 7
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <LCD_Vid_SendCommand+0x2c>
 73a:	00 c0       	rjmp	.+0      	; 0x73c <LCD_Vid_SendCommand+0x32>
	_delay_ms(1);
	MGPIO_VoidSetPortValue(PORTData, Copy_u8_Command);
 73c:	00 00       	nop
 73e:	6c 2f       	mov	r22, r28
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	41 dd       	rcall	.-1406   	; 0x1c6 <MGPIO_VoidSetPortValue>
 744:	8f e9       	ldi	r24, 0x9F	; 159
 746:	9f e0       	ldi	r25, 0x0F	; 15
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <LCD_Vid_SendCommand+0x3e>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <LCD_Vid_SendCommand+0x44>
	_delay_ms(2);
	MGPIO_VoidSetPinValue(PORTConrtol, EN, GPIO_LOW);
 74e:	00 00       	nop
 750:	40 e0       	ldi	r20, 0x00	; 0
 752:	62 e0       	ldi	r22, 0x02	; 2
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	40 dd       	rcall	.-1408   	; 0x1d8 <MGPIO_VoidSetPinValue>
 758:	8f e9       	ldi	r24, 0x9F	; 159
 75a:	9f e0       	ldi	r25, 0x0F	; 15
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	f1 f7       	brne	.-4      	; 0x75c <LCD_Vid_SendCommand+0x52>
 760:	00 c0       	rjmp	.+0      	; 0x762 <LCD_Vid_SendCommand+0x58>
 762:	00 00       	nop
	_delay_ms(2);
}
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <LCD_Vid_8BitInit>:
#define F_CPU 8000000UL
#include <util/delay.h>

void LCD_Vid_8BitInit(void)
{
	MGPIO_VoidSetPortDirection(PORTConrtol, GPIO_OUTPUT);
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	14 dd       	rcall	.-1496   	; 0x196 <MGPIO_VoidSetPortDirection>
	MGPIO_VoidSetPortDirection(PORTData, GPIO_OUTPUT);
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	11 dd       	rcall	.-1502   	; 0x196 <MGPIO_VoidSetPortDirection>
 774:	2f eb       	ldi	r18, 0xBF	; 191
 776:	8a ed       	ldi	r24, 0xDA	; 218
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	21 50       	subi	r18, 0x01	; 1
 77c:	80 40       	sbci	r24, 0x00	; 0
 77e:	90 40       	sbci	r25, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <LCD_Vid_8BitInit+0x12>
 782:	00 c0       	rjmp	.+0      	; 0x784 <LCD_Vid_8BitInit+0x1c>
	_delay_ms(35);
	LCD_Vid_SendCommand(FunctionSet_8BIT_2lines_5x7dots);
 784:	00 00       	nop
 786:	88 e3       	ldi	r24, 0x38	; 56
 788:	c0 df       	rcall	.-128    	; 0x70a <LCD_Vid_SendCommand>
 78a:	8f ec       	ldi	r24, 0xCF	; 207
 78c:	97 e0       	ldi	r25, 0x07	; 7
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	f1 f7       	brne	.-4      	; 0x78e <LCD_Vid_8BitInit+0x26>
 792:	00 c0       	rjmp	.+0      	; 0x794 <LCD_Vid_8BitInit+0x2c>
	_delay_ms(1);
	LCD_Vid_SendCommand(DisplayON);
 794:	00 00       	nop
 796:	8c e0       	ldi	r24, 0x0C	; 12
 798:	b8 df       	rcall	.-144    	; 0x70a <LCD_Vid_SendCommand>
 79a:	8f ec       	ldi	r24, 0xCF	; 207
 79c:	97 e0       	ldi	r25, 0x07	; 7
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <LCD_Vid_8BitInit+0x36>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <LCD_Vid_8BitInit+0x3c>
	_delay_ms(1);
	LCD_Vid_SendCommand(DisplayClear);
 7a4:	00 00       	nop
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	b0 df       	rcall	.-160    	; 0x70a <LCD_Vid_SendCommand>
 7aa:	8f e9       	ldi	r24, 0x9F	; 159
 7ac:	9f e0       	ldi	r25, 0x0F	; 15
 7ae:	01 97       	sbiw	r24, 0x01	; 1
 7b0:	f1 f7       	brne	.-4      	; 0x7ae <LCD_Vid_8BitInit+0x46>
 7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <LCD_Vid_8BitInit+0x4c>
	_delay_ms(2);
	LCD_Vid_SendCommand(EntryMode);
 7b4:	00 00       	nop
 7b6:	86 e0       	ldi	r24, 0x06	; 6
 7b8:	a8 cf       	rjmp	.-176    	; 0x70a <LCD_Vid_SendCommand>
 7ba:	08 95       	ret

000007bc <LCD_Vid_SendChar>:
	MGPIO_VoidSetPinValue(PORTConrtol, EN, GPIO_LOW);
	_delay_ms(2);
}

void LCD_Vid_SendChar(u8 Copy_u8_Data)
{
 7bc:	cf 93       	push	r28
 7be:	c8 2f       	mov	r28, r24
	MGPIO_VoidSetPinValue(PORTConrtol, RS, GPIO_HIGH);
 7c0:	41 e0       	ldi	r20, 0x01	; 1
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	08 dd       	rcall	.-1520   	; 0x1d8 <MGPIO_VoidSetPinValue>
	MGPIO_VoidSetPinValue(PORTConrtol, RW, GPIO_LOW);
 7c8:	40 e0       	ldi	r20, 0x00	; 0
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	04 dd       	rcall	.-1528   	; 0x1d8 <MGPIO_VoidSetPinValue>
 7d0:	8f ec       	ldi	r24, 0xCF	; 207
 7d2:	97 e0       	ldi	r25, 0x07	; 7
 7d4:	01 97       	sbiw	r24, 0x01	; 1
 7d6:	f1 f7       	brne	.-4      	; 0x7d4 <LCD_Vid_SendChar+0x18>
 7d8:	00 c0       	rjmp	.+0      	; 0x7da <LCD_Vid_SendChar+0x1e>
 7da:	00 00       	nop
	_delay_ms(1);
	MGPIO_VoidSetPinValue(PORTConrtol, EN, GPIO_HIGH);
 7dc:	41 e0       	ldi	r20, 0x01	; 1
 7de:	62 e0       	ldi	r22, 0x02	; 2
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	fa dc       	rcall	.-1548   	; 0x1d8 <MGPIO_VoidSetPinValue>
 7e4:	8f ec       	ldi	r24, 0xCF	; 207
 7e6:	97 e0       	ldi	r25, 0x07	; 7
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <LCD_Vid_SendChar+0x2c>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <LCD_Vid_SendChar+0x32>
	_delay_ms(1);
	MGPIO_VoidSetPortValue(PORTData, Copy_u8_Data);
 7ee:	00 00       	nop
 7f0:	6c 2f       	mov	r22, r28
 7f2:	83 e0       	ldi	r24, 0x03	; 3
 7f4:	e8 dc       	rcall	.-1584   	; 0x1c6 <MGPIO_VoidSetPortValue>
 7f6:	8f e9       	ldi	r24, 0x9F	; 159
 7f8:	9f e0       	ldi	r25, 0x0F	; 15
 7fa:	01 97       	sbiw	r24, 0x01	; 1
 7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_Vid_SendChar+0x3e>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <LCD_Vid_SendChar+0x44>
	_delay_ms(2);
	MGPIO_VoidSetPinValue(PORTConrtol, EN, GPIO_LOW);
 800:	00 00       	nop
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	62 e0       	ldi	r22, 0x02	; 2
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	e7 dc       	rcall	.-1586   	; 0x1d8 <MGPIO_VoidSetPinValue>
 80a:	8f e9       	ldi	r24, 0x9F	; 159
 80c:	9f e0       	ldi	r25, 0x0F	; 15
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_Vid_SendChar+0x52>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_Vid_SendChar+0x58>
 814:	00 00       	nop
	_delay_ms(2);

}
 816:	cf 91       	pop	r28
 818:	08 95       	ret

0000081a <LCD_Vid_SendString>:



void LCD_Vid_SendString(u8* CopyPtrToString, u8 Copy_u8_Row, u8 Copy_u8_Col)
{
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	6c 01       	movw	r12, r24
	u8 local_u8_index = 0;
	u8 local_u8_Row=0;
	while (CopyPtrToString[local_u8_index] != '\0' && ((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))<32 ){
 82c:	80 e1       	ldi	r24, 0x10	; 16
 82e:	68 9f       	mul	r22, r24
 830:	70 01       	movw	r14, r0
 832:	11 24       	eor	r1, r1


void LCD_Vid_SendString(u8* CopyPtrToString, u8 Copy_u8_Row, u8 Copy_u8_Col)
{
	u8 local_u8_index = 0;
	u8 local_u8_Row=0;
 834:	d0 e0       	ldi	r29, 0x00	; 0



void LCD_Vid_SendString(u8* CopyPtrToString, u8 Copy_u8_Row, u8 Copy_u8_Col)
{
	u8 local_u8_index = 0;
 836:	c0 e0       	ldi	r28, 0x00	; 0
	u8 local_u8_Row=0;
	while (CopyPtrToString[local_u8_index] != '\0' && ((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))<32 ){
 838:	04 2f       	mov	r16, r20
 83a:	10 e0       	ldi	r17, 0x00	; 0
 83c:	11 c0       	rjmp	.+34     	; 0x860 <LCD_Vid_SendString+0x46>
		if (((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))<16){
 83e:	20 31       	cpi	r18, 0x10	; 16
 840:	31 05       	cpc	r19, r1
 842:	1c f4       	brge	.+6      	; 0x84a <LCD_Vid_SendString+0x30>
			LCD_Vid_SendChar(CopyPtrToString[local_u8_index]);
 844:	bb df       	rcall	.-138    	; 0x7bc <LCD_Vid_SendChar>
			local_u8_index++;
 846:	cf 5f       	subi	r28, 0xFF	; 255
 848:	0b c0       	rjmp	.+22     	; 0x860 <LCD_Vid_SendString+0x46>
		}

		else if (((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))==16){
 84a:	20 31       	cpi	r18, 0x10	; 16
 84c:	31 05       	cpc	r19, r1
 84e:	21 f4       	brne	.+8      	; 0x858 <LCD_Vid_SendString+0x3e>
		local_u8_address = 0x00 + Copy_u8_Col;
		case 1:
		local_u8_address = 0x40 + Copy_u8_Col;
	}
	local_u8_address = local_u8_address | 0x80;
	LCD_Vid_SendCommand(local_u8_address);
 850:	80 ec       	ldi	r24, 0xC0	; 192
 852:	5b df       	rcall	.-330    	; 0x70a <LCD_Vid_SendCommand>
			local_u8_index++;
		}

		else if (((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))==16){
			LCD_Vid_GoToRowCol(1,0);
			local_u8_Row++;
 854:	df 5f       	subi	r29, 0xFF	; 255
 856:	04 c0       	rjmp	.+8      	; 0x860 <LCD_Vid_SendString+0x46>
		}
		else if (((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))<32 && local_u8_Row==1){
 858:	d1 30       	cpi	r29, 0x01	; 1
			LCD_Vid_SendChar(CopyPtrToString[local_u8_index]);
 85a:	11 f4       	brne	.+4      	; 0x860 <LCD_Vid_SendString+0x46>
 85c:	af df       	rcall	.-162    	; 0x7bc <LCD_Vid_SendChar>
			local_u8_index++;
 85e:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_Vid_SendString(u8* CopyPtrToString, u8 Copy_u8_Row, u8 Copy_u8_Col)
{
	u8 local_u8_index = 0;
	u8 local_u8_Row=0;
	while (CopyPtrToString[local_u8_index] != '\0' && ((Copy_u8_Row*16)+(local_u8_index+Copy_u8_Col))<32 ){
 860:	f6 01       	movw	r30, r12
 862:	ec 0f       	add	r30, r28
 864:	f1 1d       	adc	r31, r1
 866:	80 81       	ld	r24, Z
 868:	88 23       	and	r24, r24
 86a:	41 f0       	breq	.+16     	; 0x87c <LCD_Vid_SendString+0x62>
 86c:	98 01       	movw	r18, r16
 86e:	2c 0f       	add	r18, r28
 870:	31 1d       	adc	r19, r1
 872:	2e 0d       	add	r18, r14
 874:	3f 1d       	adc	r19, r15
 876:	20 32       	cpi	r18, 0x20	; 32
 878:	31 05       	cpc	r19, r1
 87a:	0c f3       	brlt	.-62     	; 0x83e <LCD_Vid_SendString+0x24>
			LCD_Vid_SendChar(CopyPtrToString[local_u8_index]);
			local_u8_index++;
		}
		
	}
}
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	ff 90       	pop	r15
 886:	ef 90       	pop	r14
 888:	df 90       	pop	r13
 88a:	cf 90       	pop	r12
 88c:	08 95       	ret

0000088e <LCD_Vid_ClearScreen>:

void LCD_Vid_ClearScreen(void)
{
	LCD_Vid_SendCommand(DisplayClear);
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	3c cf       	rjmp	.-392    	; 0x70a <LCD_Vid_SendCommand>
 892:	08 95       	ret

00000894 <main>:
static u8 current_level=0;

int main(void)
{

	UART_Init(UART2);
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	b0 de       	rcall	.-672    	; 0x5f8 <UART_Init>
	
LCD_Vid_8BitInit();
 898:	67 df       	rcall	.-306    	; 0x768 <LCD_Vid_8BitInit>
 89a:	40 e0       	ldi	r20, 0x00	; 0
	LCD_Vid_SendString("HI", 0,0);
 89c:	60 e0       	ldi	r22, 0x00	; 0
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	92 e0       	ldi	r25, 0x02	; 2
 8a2:	bb df       	rcall	.-138    	; 0x81a <LCD_Vid_SendString>
 8a4:	2f ef       	ldi	r18, 0xFF	; 255
 8a6:	89 e6       	ldi	r24, 0x69	; 105
 8a8:	98 e1       	ldi	r25, 0x18	; 24
 8aa:	21 50       	subi	r18, 0x01	; 1
 8ac:	80 40       	sbci	r24, 0x00	; 0
 8ae:	90 40       	sbci	r25, 0x00	; 0
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <main+0x16>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <main+0x20>
 8b4:	00 00       	nop
	_delay_ms(1000);
	LCD_Vid_ClearScreen();
 8b6:	eb df       	rcall	.-42     	; 0x88e <LCD_Vid_ClearScreen>
	MGPIO_VoidSetPortDirection(GPIO_PORTA, GPIO_OUTPUT);
 8b8:	61 e0       	ldi	r22, 0x01	; 1
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	6c dc       	rcall	.-1832   	; 0x196 <MGPIO_VoidSetPortDirection>
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	89 e6       	ldi	r24, 0x69	; 105
 8c2:	98 e1       	ldi	r25, 0x18	; 24
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	80 40       	sbci	r24, 0x00	; 0
 8c8:	90 40       	sbci	r25, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <main+0x30>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <main+0x3a>
 8ce:	00 00       	nop
	
    while (1) 
    {		
			_delay_ms(1000);
			current_level = UART_ReceiveByte(UART2);
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	ce de       	rcall	.-612    	; 0x670 <UART_ReceiveByte>
 8d4:	83 30       	cpi	r24, 0x03	; 3
			switch (current_level)
 8d6:	01 f1       	breq	.+64     	; 0x918 <main+0x84>
 8d8:	28 f4       	brcc	.+10     	; 0x8e4 <main+0x50>
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	79 f0       	breq	.+30     	; 0x8fc <main+0x68>
 8de:	82 30       	cpi	r24, 0x02	; 2
 8e0:	a1 f0       	breq	.+40     	; 0x90a <main+0x76>
 8e2:	ed cf       	rjmp	.-38     	; 0x8be <main+0x2a>
 8e4:	85 30       	cpi	r24, 0x05	; 5
 8e6:	31 f1       	breq	.+76     	; 0x934 <main+0xa0>
 8e8:	f0 f0       	brcs	.+60     	; 0x926 <main+0x92>
 8ea:	86 30       	cpi	r24, 0x06	; 6
 8ec:	41 f7       	brne	.-48     	; 0x8be <main+0x2a>
			{
				case 6:
					LCD_Vid_ClearScreen();
 8ee:	cf df       	rcall	.-98     	; 0x88e <LCD_Vid_ClearScreen>
					LCD_Vid_SendString("EMERGENCY!!", 0,0);
 8f0:	40 e0       	ldi	r20, 0x00	; 0
 8f2:	60 e0       	ldi	r22, 0x00	; 0
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	92 e0       	ldi	r25, 0x02	; 2
 8f8:	90 df       	rcall	.-224    	; 0x81a <LCD_Vid_SendString>
					break;
				case 1:
					LCD_Vid_ClearScreen();
 8fa:	e1 cf       	rjmp	.-62     	; 0x8be <main+0x2a>
 8fc:	c8 df       	rcall	.-112    	; 0x88e <LCD_Vid_ClearScreen>
					LCD_Vid_SendString("Elevator in F1", 0,0);
 8fe:	40 e0       	ldi	r20, 0x00	; 0
 900:	60 e0       	ldi	r22, 0x00	; 0
 902:	8f e0       	ldi	r24, 0x0F	; 15
 904:	92 e0       	ldi	r25, 0x02	; 2
					break;
 906:	89 df       	rcall	.-238    	; 0x81a <LCD_Vid_SendString>
				case 2:
					LCD_Vid_ClearScreen();
 908:	da cf       	rjmp	.-76     	; 0x8be <main+0x2a>
 90a:	c1 df       	rcall	.-126    	; 0x88e <LCD_Vid_ClearScreen>
					LCD_Vid_SendString("Elevator in F2", 0,0);
 90c:	40 e0       	ldi	r20, 0x00	; 0
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	8e e1       	ldi	r24, 0x1E	; 30
 912:	92 e0       	ldi	r25, 0x02	; 2
					break;
 914:	82 df       	rcall	.-252    	; 0x81a <LCD_Vid_SendString>
				case 3:
					LCD_Vid_ClearScreen();
 916:	d3 cf       	rjmp	.-90     	; 0x8be <main+0x2a>
					LCD_Vid_SendString("Elevator in F3", 0,0);
 918:	ba df       	rcall	.-140    	; 0x88e <LCD_Vid_ClearScreen>
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	8d e2       	ldi	r24, 0x2D	; 45
 920:	92 e0       	ldi	r25, 0x02	; 2
					break;
 922:	7b df       	rcall	.-266    	; 0x81a <LCD_Vid_SendString>
				case 4:
					LCD_Vid_ClearScreen();
 924:	cc cf       	rjmp	.-104    	; 0x8be <main+0x2a>
 926:	b3 df       	rcall	.-154    	; 0x88e <LCD_Vid_ClearScreen>
					LCD_Vid_SendString("Elevator in F4", 0,0);
 928:	40 e0       	ldi	r20, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	8c e3       	ldi	r24, 0x3C	; 60
 92e:	92 e0       	ldi	r25, 0x02	; 2
 930:	74 df       	rcall	.-280    	; 0x81a <LCD_Vid_SendString>
 932:	c5 cf       	rjmp	.-118    	; 0x8be <main+0x2a>
					break;
 934:	ac df       	rcall	.-168    	; 0x88e <LCD_Vid_ClearScreen>
				case 5:
					LCD_Vid_ClearScreen();
 936:	40 e0       	ldi	r20, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
					LCD_Vid_SendString("Elevator in F0", 0,0);
 93a:	8b e4       	ldi	r24, 0x4B	; 75
 93c:	92 e0       	ldi	r25, 0x02	; 2
 93e:	6d df       	rcall	.-294    	; 0x81a <LCD_Vid_SendString>
 940:	be cf       	rjmp	.-132    	; 0x8be <main+0x2a>

00000942 <__tablejump2__>:
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
					break;
 946:	88 1f       	adc	r24, r24
 948:	8b bf       	out	0x3b, r24	; 59
 94a:	07 90       	elpm	r0, Z+
 94c:	f6 91       	elpm	r31, Z
 94e:	e0 2d       	mov	r30, r0
 950:	19 94       	eijmp

00000952 <_exit>:
 952:	f8 94       	cli

00000954 <__stop_program>:
 954:	ff cf       	rjmp	.-2      	; 0x954 <__stop_program>
